//
// Copyright 2018-2019 Rochus Keller <mailto:me@rochus-keller.ch>
//
// This file is part of the Verilog parser library.
//
// The following is the license that applies to this copy of the
// file. For a license to use the file under conditions
// other than those described here, please email to me@rochus-keller.ch.
//
// GNU General Public License Usage
// This file may be used under the terms of the GNU General Public
// License (GPL) versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the file LICENSE.GPL included in
// the packaging of this file. Please review the following information
// to ensure GNU General Public Licensing requirements will be met:
// http://www.fsf.org/licensing/licenses/info/GPLv2.html and
// http://www.gnu.org/copyleft/gpl.html.
// 

// Modification steps:
// Saved pages 517 to 539 from IEEE 1364-2005 Annex A into text file using Foxit Reader
// Removed all page marks and page headers/footers
// Unidented everything leftwards; continuing lines still start with whitespace
// Applied EbnfStudio "Transform IEEE EBNF Text..."
// Copied keywords from IEEE 1364-2005 Annex B
// Manually fixed errors in the standard syntax and converted []{} to terminals 
// Added $idents to keywords
// Commented out PATHPULSE$string and all lexer productions
// Resolved FRST/FIRST and FIRST/FOLLOW conflicts and left recursion; 
// 	non-standard helper productions (and only these) have names with "_" postfix
// Added top production Verilog
// Redefined number for better preprocessor compatibility
// Added explicit lexer tokens to rename existing terminals and to give additional options to the parser
// Added pragmas
// Added \LL:2\ prefixes where needed
// Allow some DEVIATIONs from standard due to many projects with wrong syntax
// Made some productions transparent (*) to meet CrossRefModel::fillAst
// Added SystemVerilog 12 extension (define SV12)


#define SV12 // disable SV extension by commenting out the define

// Annex A 

// A.1 Source text 

Verilog* ::= 
	{ 
		// source_text:
		module_declaration 
		| udp_declaration
		| config_declaration
		// library_text:
		| library_declaration 
		| include_statement 
		// | config_declaration
	}

// A.1.1 Library source text 

library_text- ::= { library_description } 

library_description- ::= 
	library_declaration 
	| include_statement 
	| config_declaration 

library_declaration ::= 
	library library_identifier file_path_spec { ',' file_path_spec }
		[ '-'incdir file_path_spec { ',' file_path_spec } ] ';' 

include_statement ::= include file_path_spec ';' 

file_path_spec ::=  string |  file_path_glyph_ { file_path_glyph_ } // helper, not defined in the official syntax
file_path_glyph_ ::= identifier | '/' | '*' | '?' | '.' | '..' | '...'

// A.1.2 Verilog source text 

source_text- ::= { description } 

description- ::= 
	module_declaration 
	| udp_declaration 
	| config_declaration 

module_declaration ::= 
	{ attribute_instance } 
	module_keyword module_identifier [ module_parameter_port_list ] 
	(
		[ '(' ( 
			list_of_ports 
			| list_of_port_declarations
		) ')' ] ';' 
		{ port_declaration ';' | non_port_module_item } 
		// list_of_ports ';' { module_item } 
		// | [ list_of_port_declarations ] ';' { non_port_module_item }
	)
	endmodule 

module_keyword* ::= module | macromodule 

// A.1.3 Module parameters and ports 

module_parameter_port_list ::= '#' '(' parameter_declaration { ',' parameter_declaration } ')' 

list_of_ports ::= 
	port { ',' port }
	// '(' port { ',' port } ')' 

list_of_port_declarations ::= 
	port_declaration { ',' port_declaration }
	// '(' [ port_declaration { ',' port_declaration } ] ')' 
	// | '(' ')' 

port ::= 
	[ port_expression ] 
	| '.' port_identifier '(' [ port_expression ] ')' 

port_expression ::= 
	port_reference 
	| '{' port_reference { ',' port_reference } '}'

port_reference ::= 
	port_identifier [ '[' constant_range_expression ']' ] 

port_declaration ::= 
	{ attribute_instance } inout_declaration 
	| { attribute_instance } input_declaration 
	| { attribute_instance } output_declaration 

// A.1.4 Module items 

module_item- ::= 
	port_declaration ';' 
	| non_port_module_item 

module_or_generate_item ::= 
	{ attribute_instance } module_or_generate_item_declaration 
	| { attribute_instance } local_parameter_declaration ';' 
	| { attribute_instance } parameter_override 
	| { attribute_instance } continuous_assign 
	| { attribute_instance } gate_instantiation 
#ifdef SV12
	| \LL:2\ block_identifier ':' concurrent_assertion_statement
#endif
	| { attribute_instance } module_or_udp_instantiation_
	// | { attribute_instance } udp_instantiation 
	// | { attribute_instance } module_instantiation 
	
	| { attribute_instance } initial_construct 
	| { attribute_instance } always_construct 
	| { attribute_instance } loop_generate_construct 
	| { attribute_instance } conditional_generate_construct 
#ifdef SV12
	| { attribute_instance } concurrent_assertion_statement  
#endif

module_or_generate_item_declaration ::= 
	net_declaration 
	| reg_declaration 
	| integer_declaration 
	| real_declaration 
	| time_declaration 
	| realtime_declaration 
	| event_declaration 
	| genvar_declaration 
	| task_declaration 
	| function_declaration 

non_port_module_item ::= 
	module_or_generate_item 
	| generate_region 
	| specify_block 
	| { attribute_instance } parameter_declaration ';' 
	| { attribute_instance } specparam_declaration 

parameter_override ::= defparam list_of_defparam_assignments ';' 

// A.1.5 Configuration source text 

config_declaration ::= 
	config config_identifier ';' 
	design_statement 
	{ config_rule_statement } 
	endconfig 

design_statement ::= design { [ \LL:2\ library_identifier '.' ] cell_identifier } ';' 

config_rule_statement ::= 
	default_clause liblist_clause ';' 
	| inst_clause (  liblist_clause | use_clause ) ';' 
	| cell_clause ( liblist_clause | use_clause ) ';' 

default_clause ::= default 

inst_clause ::= instance inst_name 

inst_name ::= topmodule_identifier { '.' instance_identifier }

cell_clause ::= cell [ \LL:2\ library_identifier '.' ] cell_identifier

liblist_clause ::= liblist { library_identifier } 

use_clause ::= use [ \LL:2\ library_identifier '.' ] cell_identifier [ ':' config ]

// A.2 Declarations 

// A.2.1 Declaration types 

// A.2.1.1 Module parameter declarations 

local_parameter_declaration ::= 
	localparam 
	( 
		[ signed ] [ range ] list_of_param_assignments 
		| parameter_type list_of_param_assignments 
	)

parameter_declaration ::= 
	parameter 
	(
		[ signed ] [ range ] list_of_param_assignments 
		| parameter_type list_of_param_assignments 
	)

specparam_declaration ::= specparam [ range ] list_of_specparam_assignments ';' 

parameter_type ::= 
	integer | real | realtime | time 

// A.2.1.2 Port declarations 

inout_declaration ::= 
	inout [ net_type ] [ signed ] [ range ] list_of_port_identifiers 

input_declaration ::= 
	input 
	(
		[ net_type ] [ signed ] [ range ] list_of_port_identifiers 
#ifdef SV12
		| reg_ [ signed ] [ range ]  list_of_variable_port_identifiers // SV orig list_of_variable_identifiers
#endif
	)

output_declaration ::= 
	output 
	(
		[ net_type ] [ signed ] [ range ]  list_of_port_identifiers 
		| reg_ [ signed ] [ range ]  list_of_variable_port_identifiers
		| output_variable_type  list_of_variable_port_identifiers 
	)

// A.2.1.3 Type declarations 

event_declaration ::= event list_of_event_identifiers ';' 

integer_declaration ::= integer list_of_variable_identifiers ';' 

net_declaration ::= 
	net_type [ \LL:2\ drive_strength ] [ vectored | scalared ] [ signed ] [ range ] [ delay3 ]
		list_of_net_identifiers_of_decl_assignments_ ';'
	// net_type [ signed ] [ delay3 ] list_of_net_identifiers ';' 
	// | net_type [ drive_strength ] [ signed ] [ delay3 ] list_of_net_decl_assignments ';' 
	// | net_type [ vectored | scalared ] [ signed ] range [ delay3 ] list_of_net_identifiers ';' 
	// | net_type [ drive_strength ] [ vectored | scalared ] [ signed ] range [ delay3 ] list_of_net_decl_assignments ';' 
	
	| trireg [ \LL:2\ charge_strength ] [ vectored | scalared ] [ signed ] [ range ] [ delay3 ]
		list_of_net_identifiers_of_decl_assignments_ ';'
	// | trireg [ charge_strength ] [ signed ] [ delay3 ] list_of_net_identifiers ';' 
	// | trireg [ charge_strength ] [ vectored | scalared ] [ signed ] range [ delay3 ] list_of_net_identifiers ';' 
	// | trireg [ drive_strength ] [ signed ] [ delay3 ] list_of_net_decl_assignments ';' 
	// | trireg [ drive_strength ] [ vectored | scalared ] [ signed ] range [ delay3 ] list_of_net_decl_assignments ';' 

list_of_net_identifiers_of_decl_assignments_ ::=
	// ( list_of_net_identifiers | list_of_net_decl_assignments ) 
	net_identifier ( { dimension } | '=' expression ) { ',' net_identifier ( { dimension } | '=' expression ) } 

real_declaration ::= real list_of_real_identifiers ';' 

realtime_declaration ::= realtime list_of_real_identifiers ';' 

reg_declaration ::= 
	reg_ [ signed ] [ range ] list_of_variable_identifiers ';' 

time_declaration ::= time list_of_variable_identifiers ';' 

// A.2.2 Declaration data types 

// A.2.2.1 Net and variable types 

net_type ::= 
	supply0 | supply1 
	| tri | triand | trior | tri0 | tri1 
	| uwire | wire | wand | wor 

output_variable_type ::= integer | time 

real_type ::= 
	real_identifier 
	( 
		{ dimension } 
		| '=' constant_expression 
	)

variable_type ::= 
	variable_identifier 
	( 
		{ dimension } 
		| '=' constant_expression 
	)

// A.2.2.2 Strengths 

drive_strength ::= 
	'(' ( strength0 | strength1 |  highz0 | highz1 ) ',' ( strength1 | strength0 | highz1 | highz0 ) ')'
	// '(' strength0 ',' strength1 ')' 
	// | '(' strength1 ',' strength0 ')' 
	// | '(' strength0 ',' highz1 ')' 
	// | '(' strength1 ',' highz0 ')' 
	// | '(' highz0 ',' strength1 ')' 
	// | '(' highz1 ',' strength0 ')' 

strength0* ::= supply0 | strong0 | pull0 | weak0 

strength1* ::= supply1 | strong1 | pull1 | weak1 

charge_strength ::= '(' ( small | medium | large ) ')' 

// A.2.2.3 Delays 

delay3 ::= 
	'#'  ( 
		delay_value 
		| '(' mintypmax_expression [ ',' mintypmax_expression [ ',' mintypmax_expression ] ] ')' 
	)

delay2 ::= 
	'#' ( 
		delay_value 
		| '(' mintypmax_expression [ ',' mintypmax_expression ] ')' 
	)

delay_value ::= 
	unsigned_number 
	| real_number 
	| identifier 

// A.2.3 Declaration lists 

list_of_defparam_assignments ::= defparam_assignment { ',' defparam_assignment } 

list_of_event_identifiers ::= event_identifier { dimension } 
	{ ',' event_identifier { dimension } } 

list_of_net_decl_assignments- ::= net_decl_assignment { ',' net_decl_assignment } 

list_of_net_identifiers- ::= net_identifier { dimension } 
	{ ',' net_identifier { dimension } } 

list_of_param_assignments ::= param_assignment { \LL:2\ ',' param_assignment } 

list_of_port_identifiers* ::= port_identifier { \LL:2\ ',' port_identifier } 

list_of_real_identifiers ::= real_type { ',' real_type } 

list_of_specparam_assignments ::= specparam_assignment { ',' specparam_assignment } 

list_of_variable_identifiers ::= variable_type { ',' variable_type } 

list_of_variable_port_identifiers ::= port_identifier [ '=' constant_expression ] 
	{ \LL:2\ ',' port_identifier [ '=' constant_expression ] } 

// A.2.4 Declaration assignments 

defparam_assignment ::= hierarchical_parameter_identifier '=' constant_mintypmax_expression 

net_decl_assignment- ::= net_identifier '=' expression 

param_assignment ::= parameter_identifier '=' constant_mintypmax_expression 

specparam_assignment ::= 
	specparam_identifier '=' constant_mintypmax_expression 
	| pulse_control_specparam 

pulse_control_specparam ::= 
	PATHPULSE$ '=' '(' reject_limit_value [ ',' error_limit_value ] ')' 
	// | PATHPULSE$specify_input_terminal_descriptor$specify_output_terminal_descriptor 
	'=' '(' reject_limit_value [ ',' error_limit_value ] ')' 

error_limit_value ::= limit_value 

reject_limit_value ::= limit_value 

limit_value* ::= constant_mintypmax_expression 

// A.2.5 Declaration ranges 

dimension ::= '[' dimension_constant_expression ':' dimension_constant_expression ']' 

range ::= '[' msb_constant_expression ':' lsb_constant_expression ']'

// A.2.6 Function declarations 

function_declaration ::= 
	function [ automatic ] [ function_range_or_type ] function_identifier [ '(' function_port_list ')' ] ';' 
		{ block_item_declaration | { attribute_instance } tf_input_declaration ';' }
		function_statement endfunction
	// function [ automatic ] [ function_range_or_type ] function_identifier ';' 
	// 	function_item_declaration { function_item_declaration } function_statement endfunction 
	// | function [ automatic ] [ function_range_or_type ] function_identifier '(' function_port_list ')' ';' 
	// 	{ block_item_declaration } function_statement endfunction 

function_item_declaration- ::= 
	block_item_declaration 
	| { attribute_instance } tf_input_declaration ';' 

function_port_list ::= { attribute_instance } tf_input_declaration { ',' { attribute_instance } 
	tf_input_declaration } 

function_range_or_type ::= 
	[ signed ] [ range ] 
	| integer 
	| real 
	| realtime 
	| time 

// A.2.7 Task declarations 

task_declaration ::= 
	task [ automatic ] task_identifier [ '(' [ task_port_list ] ')' ] ';' 
	{ task_item_declaration }
	statement_or_null  endtask 
	// task [ automatic ] task_identifier ';' 
	// 	{ task_item_declaration } statement_or_null  endtask 
	// | task [ automatic ] task_identifier '(' [ task_port_list ] ')' ';' 
	// 	{ block_item_declaration } statement_or_null endtask 

task_item_declaration ::= 
	block_item_declaration 
	| { attribute_instance } tf_input_declaration ';' 
	| { attribute_instance } tf_output_declaration ';' 
	| { attribute_instance } tf_inout_declaration ';' 

task_port_list ::= task_port_item { ',' task_port_item } 

task_port_item ::= 
	{ attribute_instance } tf_input_declaration 
	| { attribute_instance } tf_output_declaration 
	| { attribute_instance } tf_inout_declaration 

tf_input_declaration ::= 
	input (
		[ reg_ ] [ signed ] [ range ] list_of_port_identifiers 
		| task_port_type list_of_port_identifiers 
	)

tf_output_declaration ::= 
	output (
		[ reg_ ] [ signed ] [ range ] list_of_port_identifiers 
		| task_port_type list_of_port_identifiers 
	)

tf_inout_declaration ::= 
	inout (
		[ reg_ ] [ signed ] [ range ] list_of_port_identifiers 
		| task_port_type list_of_port_identifiers 
	)

task_port_type ::= 
	integer | real | realtime | time 

// A.2.8 Block item declarations 

block_item_declaration ::= 
	{ attribute_instance } reg_ [ signed ] [ range ] list_of_block_variable_identifiers ';' 
	| { attribute_instance } integer list_of_block_variable_identifiers ';' 
	| { attribute_instance } time list_of_block_variable_identifiers ';' 
	| { attribute_instance } real list_of_block_real_identifiers ';' 
	| { attribute_instance } realtime list_of_block_real_identifiers ';' 
	| { attribute_instance } event_declaration 
	| { attribute_instance } local_parameter_declaration ';' 
	| { attribute_instance } parameter_declaration ';' 

list_of_block_variable_identifiers ::= block_variable_type { ',' block_variable_type } 

list_of_block_real_identifiers ::= block_real_type { ',' block_real_type } 

block_variable_type ::= variable_identifier { dimension } 

block_real_type ::= real_identifier { dimension } 

// A.3 Primitive instances 

// A.3.1 Primitive instantiation and instances 

gate_instantiation ::= 
	cmos_switchtype [ delay3 ] 
	cmos_switch_instance { ',' cmos_switch_instance } ';' 
	| enable_gatetype [ \LL:2\ drive_strength ] [ delay3 ]  enable_gate_instance { ',' enable_gate_instance } ';' 
	| mos_switchtype [ delay3 ]  mos_switch_instance { ',' mos_switch_instance } ';' 
	| n_input_gatetype [ \LL:2\ drive_strength ] [ delay2 ]  n_input_gate_instance { ',' n_input_gate_instance } ';' 
	| n_output_gatetype [ \LL:2\ drive_strength ] [ delay2 ]  n_output_gate_instance { ',' n_output_gate_instance } ';' 
	| pass_en_switchtype [ delay2 ]  pass_enable_switch_instance { ',' pass_enable_switch_instance } ';' 
	| pass_switchtype  pass_switch_instance { ',' pass_switch_instance } ';' 
	| pulldown [ \LL:2\ pulldown_strength ]  pull_gate_instance { ',' pull_gate_instance } ';' 
	| pullup [ \LL:2\ pullup_strength ]  pull_gate_instance { ',' pull_gate_instance } ';' 

cmos_switch_instance ::= [ name_of_gate_instance ] '(' output_terminal ',' input_terminal ',' 
	ncontrol_terminal ',' pcontrol_terminal ')' 

enable_gate_instance ::= [ name_of_gate_instance ] '(' output_terminal ',' input_terminal ',' enable_terminal ')' 

mos_switch_instance ::= [ name_of_gate_instance ] '(' output_terminal ',' input_terminal ',' enable_terminal ')' 

n_input_gate_instance ::= [ name_of_gate_instance ] '(' output_terminal ',' input_terminal { ',' input_terminal } ')' 

n_output_gate_instance ::= [ name_of_gate_instance ] 
	// '(' output_terminal { ',' output_terminal } ',' input_terminal ')' 
	'(' expression ',' expression { ',' expression } ')' 

pass_switch_instance ::= [ name_of_gate_instance ] '(' inout_terminal ',' inout_terminal ')' 

pass_enable_switch_instance ::= [ name_of_gate_instance ] '(' inout_terminal ',' inout_terminal ',' 
	enable_terminal ')' 

pull_gate_instance ::= [ name_of_gate_instance ] '(' output_terminal ')' 

name_of_gate_instance ::= gate_instance_identifier [ range ] 

// A.3.2 Primitive strengths 

pulldown_strength ::= 
	'(' ( strength0 | strength1 ) [ ',' ( strength1 | strength0 ) ] ')' 
	// '(' strength0 ',' strength1 ')' 
	// | '(' strength1 ',' strength0 ')' 
	// | '(' strength0 ')' 

pullup_strength ::= 
	'(' ( strength0 | strength1 ) [ ',' ( strength1 | strength0 ) ] ')' 
	// '(' strength0 ',' strength1 ')' 
	// | '(' strength1 ',' strength0 ')' 
	// | '(' strength1 ')' 

// A.3.3 Primitive terminals 

enable_terminal ::= expression 

inout_terminal ::= net_lvalue 

input_terminal ::= expression 

ncontrol_terminal ::= expression 

output_terminal ::= net_lvalue 

pcontrol_terminal ::= expression 

// A.3.4 Primitive gate and switch types 

cmos_switchtype ::= cmos | rcmos 

enable_gatetype ::= bufif0 | bufif1 | notif0 | notif1 

mos_switchtype ::= nmos | pmos | rnmos | rpmos 

n_input_gatetype ::= and | nand | or | nor | xor | xnor 

n_output_gatetype ::= buf | not 

pass_en_switchtype ::= tranif0 | tranif1 | rtranif1 | rtranif0 

pass_switchtype ::= tran | rtran 

// A.4 Module instantiation and generate construct 

// A.4.1 Module instantiation 

module_instantiation- ::= 
	module_identifier [ parameter_value_assignment ] 
	module_instance { ',' module_instance } ';' 

parameter_value_assignment- ::= '#' '(' list_of_parameter_assignments ')' 

list_of_parameter_assignments- ::= 
	ordered_parameter_assignment { ',' ordered_parameter_assignment } | 
	named_parameter_assignment { ',' named_parameter_assignment } 

ordered_parameter_assignment- ::= expression 

named_parameter_assignment ::= '.' parameter_identifier '(' [ mintypmax_expression ] ')' 

module_instance- ::= name_of_module_instance '(' [ list_of_port_connections ] ')' 

name_of_module_instance- ::= module_instance_identifier [ range ] 

list_of_port_connections- ::= 
	ordered_port_connection { ',' ordered_port_connection } 
	| named_port_connection { ',' named_port_connection } 

ordered_port_connection- ::= { attribute_instance } [ expression ] 

named_port_connection- ::= { attribute_instance } '.' port_identifier '(' [ expression ] ')' 

module_or_udp_instantiation_ ::= 
	// generalizes module_instantiation and udp_instantiation
	identifier [ \LL:2\ drive_strength ] [ parameter_value_assignment_or_delay2_ ] 
	module_or_udp_instance_ { ',' module_or_udp_instance_ } ';'
	
module_or_udp_instance_ ::=
	// generalizes module_instance and udp_instance
	[ identifier ] [ range ] 
	'(' [ { attribute_instance } port_connection_or_output_terminal_ 
		{ ',' port_connection_or_output_terminal_ } ] ')'

parameter_value_assignment_or_delay2_ ::=
	// generalizes parameter_value_assignment and delay2
	'#' [ delay_value ] '(' ( mintypmax_expression 
		{ ',' mintypmax_expression } |  named_parameter_assignment { ',' named_parameter_assignment } ) ')' 

port_connection_or_output_terminal_ ::=  
	// generalizes net_lvalue or list_of_port_connections
	( '.' port_identifier '(' [ expression ] ')'  | [ expression ] )

// A.4.2 Generate construct 

generate_region ::= 
	generate { module_or_generate_item } endgenerate 

genvar_declaration ::= 
	genvar list_of_genvar_identifiers ';' 

list_of_genvar_identifiers* ::= 
	genvar_identifier { ',' genvar_identifier } 

loop_generate_construct ::= 
	for '(' genvar_initialization ';' genvar_expression ';' genvar_iteration ')' 
	( generate_block 
	| module_or_generate_item ) // von generate_block hierher verschoben

genvar_initialization ::= 
	genvar_identifier '=' constant_expression 

genvar_expression ::= 
	genvar_primary genvar_expression_nlr_
	| unary_operator { attribute_instance } genvar_primary genvar_expression_nlr_
	// | genvar_expression binary_operator { attribute_instance } genvar_expression  
	// | genvar_expression '?' { attribute_instance } genvar_expression ':' genvar_expression 

genvar_expression_nlr_ ::=
	[ binary_operator { attribute_instance } genvar_expression genvar_expression_nlr_
	| '?' { attribute_instance } genvar_expression ':' genvar_expression genvar_expression_nlr_ ]

genvar_iteration ::= 
	genvar_identifier '=' genvar_expression 

genvar_primary ::=  
	primary
	// constant_primary 
	// | genvar_identifier 

conditional_generate_construct ::= 
	if_generate_construct 
	| case_generate_construct 

if_generate_construct ::= 
	if '(' constant_expression ')' generate_block_or_null 
	{ \LL:2\ else if '(' constant_expression ')' generate_block_or_null } // not original; added to assimilate to conditional_statement; is this correct?
	[ else generate_block_or_null ] 

case_generate_construct ::= 
	case '(' constant_expression ')' 
	case_generate_item { case_generate_item } endcase 

case_generate_item ::= 
	constant_expression { ',' constant_expression } ':' generate_block_or_null 
	| default [ ':' ] generate_block_or_null 

generate_block ::= 
	begin [ ':' generate_block_identifier ] { module_or_generate_item } end 
	// | module_or_generate_item
	// verschoben nach generate_block_or_null und loop_generate_construct

generate_block_or_null* ::= 
	generate_block 
	| module_or_generate_item // von generate_block hierher verschoben
	| ';' 

// A.5 UDP declaration and instantiation 

// A.5.1 UDP declaration 

udp_declaration ::= 
	{ attribute_instance } primitive udp_identifier '(' ( udp_port_list | udp_declaration_port_list ) ')' ';' 
		[ udp_port_declaration { udp_port_declaration } ] udp_body endprimitive 	
	// { attribute_instance } primitive udp_identifier '(' udp_port_list ')' ';' 
	// 	udp_port_declaration { udp_port_declaration } udp_body endprimitive 
	// | { attribute_instance } primitive udp_identifier '(' udp_declaration_port_list ')' ';' 
	// 	udp_body endprimitive 

// A.5.2 UDP ports 

udp_port_list ::= output_port_identifier ',' input_port_identifier { ',' input_port_identifier } 

udp_declaration_port_list ::= 
	udp_output_declaration ',' udp_input_declaration { ',' udp_input_declaration } 

udp_port_declaration ::= 
	udp_output_declaration ';' 
	| udp_input_declaration ';' 
	| udp_reg_declaration ';' 

udp_output_declaration ::= 
	{ attribute_instance } output [reg_] port_identifier [ '=' constant_expression ]
	// { attribute_instance } output port_identifier 
	// | { attribute_instance } output reg port_identifier [ '=' constant_expression ] 

udp_input_declaration ::= { attribute_instance } input list_of_port_identifiers 

udp_reg_declaration ::= { attribute_instance } reg_ variable_identifier 

// A.5.3 UDP body 

udp_body ::= 
	// combinational_body | sequential_body 
	[ udp_initial_statement ] table udp_body_entry_ { udp_body_entry_ } endtable 

udp_body_entry_ ::= 
	{ entry_symbol_ | '(' entry_symbol_ [ entry_symbol_ ] ')' } 
	':' ( entry_symbol_ | '-' ) [ ':' ( entry_symbol_ | '-' ) ] ';' 

entry_symbol_ ::= number | identifier | '?' | '*'

combinational_body- ::= table combinational_entry { combinational_entry } endtable 

combinational_entry- ::= level_input_list ':' output_symbol ';' 

sequential_body- ::= [ udp_initial_statement ] table sequential_entry { sequential_entry } endtable 

udp_initial_statement ::= initial output_port_identifier '=' init_val ';' 

init_val ::= number
	// '1\'b0' | '1\'b1' | '1\'bx' | '1\'bX' | '1\'B0' | '1\'B1' | '1\'Bx' | '1\'BX' | '1' | '0' 

sequential_entry- ::= seq_input_list ':' current_state ':' next_state ';' 

seq_input_list- ::= level_input_list | edge_input_list 

level_input_list- ::= level_symbol { level_symbol } 

edge_input_list- ::= { level_symbol } edge_indicator { level_symbol } 

edge_indicator- ::= '(' level_symbol level_symbol ')' | edge_symbol 

current_state- ::= level_symbol 

next_state- ::= output_symbol | '-' 

output_symbol- ::= number 
	// '0' | '1' | 'x' | 'X' 

level_symbol- ::= number 
	// '0' | '1' | 'x' | 'X' | '?' | 'b' | 'B' 

edge_symbol- ::= number 
	// 'r' | 'R' | 'f' | 'F' | 'p' | 'P' | 'n' | 'N' | '*' 

// A.5.4 UDP instantiation 

udp_instantiation- ::= udp_identifier [ drive_strength ] [ delay2 ] 
	udp_instance { ',' udp_instance } ';' 

udp_instance- ::= [ name_of_udp_instance ] '(' output_terminal ',' input_terminal 
	{ ',' input_terminal } ')' 

name_of_udp_instance- ::= udp_instance_identifier [ range ] 

// A.6 Behavioral statements 

// A.6.1 Continuous assignment statements 

continuous_assign ::= assign [ drive_strength ] [ delay3 ] list_of_net_assignments ';' 

list_of_net_assignments ::= net_assignment { ',' net_assignment } 

net_assignment ::= net_lvalue '=' expression 

// A.6.2 Procedural blocks and assignments 

initial_construct ::= initial statement 

always_construct ::= always statement 

blocking_assignment- ::= variable_lvalue '=' [ delay_or_event_control ] expression 

nonblocking_assignment- ::= variable_lvalue '<=' [ delay_or_event_control ] expression 

assignment_or_task_enable_ ::= 
	variable_lvalue ( 
		( '=' |  '<=' ) [ delay_or_event_control ] expression // assignment
		| [ '(' expression { ',' expression } ')' ] // task enable, moved semi to caller
	)

procedural_continuous_assignments ::= 
	assign assignment_ 
	| deassign lvalue_
	| force assignment_
	| release lvalue_
	// assign variable_assignment 
	// | deassign variable_lvalue 
	// | force ( variable_assignment | net_assignment )
	// | release ( variable_lvalue | net_lvalue )

assignment_ ::= lvalue_ '=' expression

variable_assignment ::= variable_lvalue '=' expression 

// A.6.3 Parallel and sequential blocks 

par_block ::= fork [ ':' block_identifier { block_item_declaration } ] 
	// { statement } join 
	// DEVIATION: allow the same here as in seq_block for uniformity reasons
	{ statement_or_null } join 

seq_block ::= begin [ ':' block_identifier { block_item_declaration } ] 
	// { statement } end 
	// DEVIATION: allow null statement due to many of examples with trailing ; before end
	{ statement_or_null } end 
	
// A.6.4 Statements 

statement ::= 
	{ attribute_instance } assignment_or_task_enable_ ';'
	// { attribute_instance } blocking_assignment ';' 
	// | { attribute_instance } nonblocking_assignment ';' 
	// | { attribute_instance } task_enable 
	
	| { attribute_instance } case_statement 
	| { attribute_instance } conditional_statement 
	| { attribute_instance } disable_statement 
	| { attribute_instance } event_trigger 
	| { attribute_instance } loop_statement 
	| { attribute_instance } par_block 
	| { attribute_instance } procedural_continuous_assignments ';' 
	| { attribute_instance } procedural_timing_control_statement 
	| { attribute_instance } seq_block 
	| { attribute_instance } system_task_enable 
	| { attribute_instance } wait_statement 
#ifdef SV12
	| { attribute_instance } procedural_assertion_statement
#endif

statement_or_null ::= 
	statement 
	| { attribute_instance } ';' 

function_statement ::= statement 

// A.6.5 Timing control statements 

delay_control ::= 
	'#' (
		delay_value 
		|  '(' mintypmax_expression ')' 
	)

delay_or_event_control ::= 
	delay_control 
	| event_control 
	| repeat '(' expression ')' event_control 

disable_statement ::= 
	disable hierarchical_identifier ';' 
	// disable ( hierarchical_task_identifier | hierarchical_block_identifier ) ';' 

event_control ::= 
	'@' ( 
		hierarchical_event_identifier 
		// | '(' event_expression ')' 
		| '(*)' 
			
		// DEVIATION due to many examples like (*), ( * )
		| '(' ( '*' | event_expression ) ')' 
		// DEVIATION due to many examples like @*, @ *
		| '*'
	)
	// | '@*' 

event_trigger ::= 
	'->' hierarchical_event_identifier { '[' expression ']' } ';' 

event_expression ::= 
	expression event_expression_nlr_
	| posedge expression event_expression_nlr_
	| negedge expression event_expression_nlr_
	// | event_expression or event_expression 
	// | event_expression ',' event_expression 

event_expression_nlr_ ::=
	[ or event_expression
	| ',' event_expression ]

procedural_timing_control ::= 
	delay_control 
	| event_control 

procedural_timing_control_statement ::= 
	procedural_timing_control statement_or_null 

wait_statement ::= 
	wait '(' expression ')' statement_or_null 

// A.6.6 Conditional statements 

conditional_statement ::= 
	if '(' expression ')' statement_or_null 
	{ \LL:2\ else if '(' expression ')' statement_or_null } 
	[ else statement_or_null ] 
	// if '(' expression ')' statement_or_null [ else statement_or_null ] 
	// | if_else_if_statement 

// if_else_if_statement ::= 
// 	if '(' expression ')' statement_or_null 
// 	{ else if '(' expression ')' statement_or_null } 
//	[ else statement_or_null ] 

// A.6.7 Case statements 

case_statement ::= 
	case '(' expression ')' 
	case_item { case_item } endcase 
	| casez '(' expression ')' 
	case_item { case_item } endcase 
	| casex '(' expression ')' 
	case_item { case_item } endcase 

case_item ::= 
	expression { ',' expression } ':' statement_or_null 
	| default [ ':' ] statement_or_null 

// A.6.8 Looping statements 

loop_statement ::= 
	forever statement 
	| repeat '(' expression ')' statement 
	| while '(' expression ')' statement 
	| for '(' variable_assignment ';' expression ';' variable_assignment ')' 
	statement 

// A.6.9 Task enable statements 

system_task_enable ::= system_task_identifier [ '(' [ expression ] { ',' [ expression ] } ')' ] ';' 

task_enable- ::= hierarchical_task_identifier [ '(' expression { ',' expression } ')' ] ';' 

// A.7 Specify section 

// A.7.1 Specify block declaration 

specify_block ::= specify { specify_item } endspecify 

specify_item ::= 
	specparam_declaration 
	| pulsestyle_declaration 
	| showcancelled_declaration 
	| path_declaration 
	| system_timing_check 

pulsestyle_declaration ::= 
	pulsestyle_onevent list_of_path_outputs ';' 
	| pulsestyle_ondetect list_of_path_outputs ';' 

showcancelled_declaration ::= 
	showcancelled list_of_path_outputs ';' 
	| noshowcancelled list_of_path_outputs ';' 

// A.7.2 Specify path declarations 

path_declaration ::= 
	path_description_ '=' path_delay_value ';'
	| state_dependent_path_declaration ';' 
	// simple_path_declaration ';' 
	// | edge_sensitive_path_declaration ';' 
	// | state_dependent_path_declaration ';' 

simple_path_declaration ::=  
	path_description_ '=' path_delay_value
	// parallel_path_description '=' path_delay_value 
	// | full_path_description '=' path_delay_value 

parallel_path_description- ::= 
	'(' specify_input_terminal_descriptor [ polarity_operator ] '=>' specify_output_terminal_descriptor ')' 

full_path_description- ::= 
	'(' list_of_path_inputs [ polarity_operator ] '*>' list_of_path_outputs ')' 

path_description_ ::=
	// generalizes parallel_path_description, full_path_description, parallel_edge_sensitive_path_description,
	// and full_edge_sensitive_path_description
	'(' [ edge_identifier ] list_of_path_inouts_ [ polarity_operator ] 
		( '*>' | '=>' ) (
			list_of_path_inouts_ 
			| '(' list_of_path_inouts_ ( [ polarity_operator ] ':' | ( '+:' | '-:' ) ) data_source_expression ')' 
		) ')' 

list_of_path_inouts_ ::= 
	// generalizes list_of_path_inputs, list_of_path_inputs
	specify_terminal_descriptor { ',' specify_terminal_descriptor } 
	
list_of_path_inputs- ::= 
	specify_input_terminal_descriptor { ',' specify_input_terminal_descriptor } 

list_of_path_outputs ::= 
	specify_output_terminal_descriptor { ',' specify_output_terminal_descriptor } 

// A.7.3 Specify block terminals 

specify_input_terminal_descriptor- ::= 
	input_identifier [ '[' constant_range_expression ']' ] 

specify_output_terminal_descriptor ::= 
	output_identifier [ '[' constant_range_expression ']' ] 

input_identifier- ::= identifier
	// input_port_identifier | inout_port_identifier 

output_identifier ::= identifier 
	// output_port_identifier | inout_port_identifier 

// A.7.4 Specify path delays 

path_delay_value ::= 
	list_of_path_delay_expressions 
	// | '(' list_of_path_delay_expressions ')'  // dieser Fall neu in primary abgedeckt

list_of_path_delay_expressions ::= 
	path_delay_expression { ',' path_delay_expression }
	// t_path_delay_expression 
	// | trise_path_delay_expression ',' tfall_path_delay_expression 
	// | trise_path_delay_expression ',' tfall_path_delay_expression ',' tz_path_delay_expression 
	// | t01_path_delay_expression ',' t10_path_delay_expression ',' t0z_path_delay_expression ',' 
	// 	tz1_path_delay_expression ',' t1z_path_delay_expression ',' tz0_path_delay_expression 
	// | t01_path_delay_expression ',' t10_path_delay_expression ',' t0z_path_delay_expression ',' 
	// 	tz1_path_delay_expression ',' t1z_path_delay_expression ',' tz0_path_delay_expression ',' 
	// 	t0x_path_delay_expression ',' tx1_path_delay_expression ',' t1x_path_delay_expression ',' 
	// 	tx0_path_delay_expression ',' txz_path_delay_expression ',' tzx_path_delay_expression 

t_path_delay_expression- ::= path_delay_expression 

trise_path_delay_expression- ::= path_delay_expression 

tfall_path_delay_expression- ::= path_delay_expression 

tz_path_delay_expression- ::= path_delay_expression 

t01_path_delay_expression- ::= path_delay_expression 

t10_path_delay_expression- ::= path_delay_expression 

t0z_path_delay_expression- ::= path_delay_expression 

tz1_path_delay_expression- ::= path_delay_expression 

t1z_path_delay_expression- ::= path_delay_expression 

tz0_path_delay_expression- ::= path_delay_expression 

t0x_path_delay_expression- ::= path_delay_expression 

tx1_path_delay_expression- ::= path_delay_expression 

t1x_path_delay_expression- ::= path_delay_expression 

tx0_path_delay_expression- ::= path_delay_expression 

txz_path_delay_expression- ::= path_delay_expression 

tzx_path_delay_expression- ::= path_delay_expression 

path_delay_expression ::= constant_mintypmax_expression 

edge_sensitive_path_declaration- ::= 
	parallel_edge_sensitive_path_description '=' path_delay_value 
	| full_edge_sensitive_path_description '=' path_delay_value 

parallel_edge_sensitive_path_description- ::= 
	'(' [ edge_identifier ] specify_input_terminal_descriptor '=>' 
		'(' specify_output_terminal_descriptor [ polarity_operator ] ':' data_source_expression ')' ')' 

full_edge_sensitive_path_description- ::= 
	'(' [ edge_identifier ] list_of_path_inputs '*>' 
		'(' list_of_path_outputs [ polarity_operator ] ':' data_source_expression ')' ')' 

data_source_expression ::= expression 

edge_identifier ::= posedge | negedge 

state_dependent_path_declaration ::= 
	if '(' module_path_expression ')' path_description_ '=' path_delay_value
	// if '(' module_path_expression ')' simple_path_declaration 
	// | if '(' module_path_expression ')' edge_sensitive_path_declaration 
	| ifnone simple_path_declaration 

polarity_operator ::= '+' | '-' 

// A.7.5 System timing checks 

// A.7.5.1 System timing check commands 

system_timing_check ::= 
	$setup_timing_check 
	| $hold_timing_check 
	| $setuphold_timing_check 
	| $recovery_timing_check 
	| $removal_timing_check 
	| $recrem_timing_check 
	| $skew_timing_check 
	| $timeskew_timing_check 
	| $fullskew_timing_check 
	| $period_timing_check 
	| $width_timing_check 
	| $nochange_timing_check 

$setup_timing_check ::= 
	$setup '(' data_event ',' reference_event ',' timing_check_limit [ ',' [ notifier ] ] ')' ';' 

$hold_timing_check ::= 
	$hold '(' reference_event ',' data_event ',' timing_check_limit [ ',' [ notifier ] ] ')' ';' 

$setuphold_timing_check ::= 
	$setuphold '(' reference_event ',' data_event ',' timing_check_limit ',' timing_check_limit 
	[ ',' [ notifier ] [ ',' [ stamptime_condition ] [ ',' [ checktime_condition ] 
	[ ',' [ delayed_reference ] [ ',' [ delayed_data ] ] ] ] ] ] ')' ';' 

$recovery_timing_check ::= 
	$recovery '(' reference_event ',' data_event ',' timing_check_limit [ ',' [ notifier ] ] ')' ';' 

$removal_timing_check ::= 
	$removal '(' reference_event ',' data_event ',' timing_check_limit [ ',' [ notifier ] ] ')' ';' 

$recrem_timing_check ::= 
	$recrem '(' reference_event ',' data_event ',' timing_check_limit ',' timing_check_limit 
	[ ',' [ notifier ] [ ',' [ stamptime_condition ] [ ',' [ checktime_condition ] 
	[ ',' [ delayed_reference ] [ ',' [ delayed_data ] ] ] ] ] ] ')' ';' 

$skew_timing_check ::= 
	$skew '(' reference_event ',' data_event ',' timing_check_limit [ ',' [ notifier ] ] ')' ';' 

$timeskew_timing_check ::= 
	$timeskew '(' reference_event ',' data_event ',' timing_check_limit 
	[ ',' [ notifier ] [ ',' [ event_based_flag ] [ ',' [ remain_active_flag ] ] ] ] ')' ';' 

$fullskew_timing_check ::= 
	$fullskew '(' reference_event ',' data_event ',' timing_check_limit ',' timing_check_limit 
	[ ',' [ notifier ] [ ',' [ event_based_flag ] [ ',' [ remain_active_flag ] ] ] ] ')' ';' 

$period_timing_check ::= 
	$period '(' controlled_reference_event ',' timing_check_limit [ ',' [ notifier ] ] ')' ';' 

$width_timing_check ::= 
	$width '(' controlled_reference_event ',' timing_check_limit 
	[ ',' threshold [ ',' notifier ] ] ')' ';' 

$nochange_timing_check ::= 
	$nochange '(' reference_event ',' data_event ',' start_edge_offset ',' 
	end_edge_offset [ ',' [ notifier ] ] ')' ';' 

// A.7.5.2 System timing check command arguments 

checktime_condition ::= mintypmax_expression 

controlled_reference_event ::= controlled_timing_check_event 

data_event ::= timing_check_event 

delayed_data ::= 
	terminal_identifier [ '[' constant_mintypmax_expression ']' ]

delayed_reference ::= 
	terminal_identifier [ '[' constant_mintypmax_expression ']' ]

end_edge_offset ::= mintypmax_expression 

event_based_flag ::= constant_expression 

notifier ::= variable_identifier 

reference_event ::= timing_check_event 

remain_active_flag ::= constant_expression 

stamptime_condition ::= mintypmax_expression 

start_edge_offset ::= mintypmax_expression 

threshold ::= constant_expression 

timing_check_limit ::= expression 

// A.7.5.3 System timing check event definitions 

timing_check_event ::= 
	[ timing_check_event_control ] specify_terminal_descriptor [ '&&&' timing_check_condition ] 

controlled_timing_check_event ::= 
	timing_check_event_control specify_terminal_descriptor [ '&&&' timing_check_condition ] 

timing_check_event_control ::= 
	posedge 
	| negedge 
	| edge_control_specifier 

specify_terminal_descriptor ::= 
	identifier [ '[' constant_range_expression ']' ]
	// specify_input_terminal_descriptor 
	// | specify_output_terminal_descriptor 

edge_control_specifier ::= edge '[' edge_descriptor { ',' edge_descriptor } ']'

edge_descriptor ::= number
	// '01' 
	// | '10' 
	// | z_or_x zero_or_one 
	// | zero_or_one z_or_x 

// zero_or_one ::= '0' | '1' 

// z_or_x ::=  x | X | z | Z 

timing_check_condition ::= 
	scalar_timing_check_condition 
	// dieser Fall wird von expression_nlr_ abgedeckt, via primary mintypmax_expression expression
	// | '(' scalar_timing_check_condition ')' 

scalar_timing_check_condition ::= 
	expression [
		'==' scalar_constant 
		| '===' scalar_constant 
		| '!=' scalar_constant 
		| '!==' scalar_constant 
	]
	// expression 
	// | '~' expression 
	// | expression '==' scalar_constant 
	// | expression '===' scalar_constant 
	// | expression '!=' scalar_constant 
	// | expression '!==' scalar_constant 

scalar_constant ::= number
	// '1\'b0' | '1\'b1' | '1\'B0' | '1\'B1' | '\'b0' | '\'b1' | '\'B0' | '\'B1' | '1' | '0' 

// A.8 Expressions 

// A.8.1 Concatenations 

concatenation- ::= '{' expression { ',' expression } '}'

constant_concatenation- ::= '{' constant_expression { ',' constant_expression } '}'

constant_multiple_concatenation- ::= '{' constant_expression constant_concatenation '}' 

module_path_concatenation- ::= '{' module_path_expression { ',' module_path_expression } '}'

module_path_multiple_concatenation- ::= '{' constant_expression module_path_concatenation '}' 

multiple_concatenation- ::= '{' constant_expression concatenation '}' 

single_or_multiple_concatenation_ ::=
	'{' expression ( 
		{ ',' expression }
		| '{' expression { ',' expression } '}' 
	) '}'
	
mod_path_single_or_multi_concat_ ::=
	'{' constant_expression (  // module_path_expression is subset of constant_expression
		{ ',' module_path_expression }  // with module_path_expression
		| '{' module_path_expression { ',' module_path_expression } '}' // with constant_expression
	) '}'

// A.8.2 Function calls 

constant_function_call- ::= function_identifier { attribute_instance } 
	'(' constant_expression { ',' constant_expression } ')' 

constant_system_function_call- ::= system_function_identifier 
	'(' constant_expression { ',' constant_expression } ')' 

function_call- ::= hierarchical_function_identifier { attribute_instance } 
	'(' expression { ',' expression } ')' 

system_function_call ::= system_function_identifier 
	[ '(' expression { ',' expression } ')' ] 

// A.8.3 Expressions 

base_expression- ::= expression 

conditional_expression- ::= expression1 '?' { attribute_instance } expression2 ':' expression3 

constant_base_expression- ::= constant_expression 

constant_expression ::= 
	expression
	// constant_primary 
	// | unary_operator { attribute_instance } constant_primary 
	// | constant_expression binary_operator { attribute_instance } constant_expression 
	// | constant_expression '?' { attribute_instance } constant_expression ':' constant_expression 

constant_mintypmax_expression ::= 
	mintypmax_expression
	// constant_expression 
	// | constant_expression ':' constant_expression ':' constant_expression 

constant_range_expression ::= 
	range_expression
	// constant_expression 
	// | msb_constant_expression ':' lsb_constant_expression 
	// | constant_base_expression '+:' width_constant_expression 
	// | constant_base_expression '-:' width_constant_expression 

dimension_constant_expression ::= constant_expression 

expression ::= 
	primary expression_nlr_
	| unary_operator { attribute_instance } primary expression_nlr_
	// primary 
	// | unary_operator { attribute_instance } primary 
	// | expression binary_operator { attribute_instance } expression 
	// | conditional_expression 
	
expression_nlr_ ::= 
	[ binary_operator { attribute_instance } expression expression_nlr_
	| '?' { attribute_instance } expression2 ':' expression3 expression_nlr_ ]

expression1- ::= expression 

expression2 ::= expression 

expression3 ::= expression 

lsb_constant_expression ::= constant_expression 

mintypmax_expression ::= 
	expression [ ':' expression ':' expression  ]
	// expression
	// | expression ':' expression ':' expression 

module_path_conditional_expression- ::= module_path_expression '?' { attribute_instance } 
	module_path_expression ':' module_path_expression 

module_path_expression ::= 
	module_path_primary module_path_expression_nlr_
	| unary_module_path_operator { attribute_instance } module_path_primary module_path_expression_nlr_
	// module_path_primary 
	// | unary_module_path_operator { attribute_instance } module_path_primary 
	// | module_path_expression binary_module_path_operator { attribute_instance } module_path_expression 
	// | module_path_conditional_expression 
	
module_path_expression_nlr_ ::=
	[ binary_module_path_operator { attribute_instance } module_path_expression module_path_expression_nlr_
	| '?' { attribute_instance } module_path_expression ':' module_path_expression module_path_expression_nlr_ ]

module_path_mintypmax_expression ::= 
	module_path_expression [ ':' module_path_expression ':' module_path_expression ]
	// | module_path_expression ':' module_path_expression ':' module_path_expression 

msb_constant_expression ::= constant_expression 

range_expression ::= 
	expression [ ( ':' | '+:' | '-:' ) constant_expression ]
	// expression 
	// | msb_constant_expression ':' lsb_constant_expression 
	// | base_expression '+:' width_constant_expression 
	// | base_expression '-:' width_constant_expression 

width_constant_expression- ::= constant_expression 

// A.8.4 Primaries 

constant_primary- ::= 
	number 
	| parameter_identifier [ '[' constant_range_expression ']' ] 
	| specparam_identifier [ '[' constant_range_expression ']' ] 
	| constant_concatenation 
	| constant_multiple_concatenation 
	| constant_function_call 
	| constant_system_function_call 
	| '(' constant_mintypmax_expression ')' 
	| string 

module_path_primary ::= 
	number 
	| rvalue_or_function_call_
	// | identifier  // subset of rvalue_
	// | function_call 
	
	| mod_path_single_or_multi_concat_
	// | module_path_concatenation 
	// | module_path_multiple_concatenation 
	
	| system_function_call 
	| '(' module_path_mintypmax_expression ')' 

primary ::= 
	number 
	| rvalue_or_function_call_ 
	// | hierarchical_identifier [ { '[' expression ']' } '[' range_expression ']' ]  // rvalue_
	// | function_call 
	
	| single_or_multiple_concatenation_
	// | concatenation 
	// | multiple_concatenation 
	
	| system_function_call 
	| '(' mintypmax_expression { ',' path_delay_expression } ')' // wegen list_of_path_delay_expressions
	// | '(' mintypmax_expression ')' 
	| string 

rvalue_or_function_call_ ::=
	// hierarchical_identifier [ { '[' expression ']' } '[' range_expression ']' ] 
	// | hierarchical_function_identifier { attribute_instance } '(' expression { ',' expression } ')' 
	hierarchical_identifier [ 
		'[' range_expression ']' { '[' range_expression ']' }
		| { attribute_instance } '(' expression { ',' expression } ')' 
	]

// A.8.5 Expression left-side values 

net_lvalue ::= 
	hierarchical_net_identifier { '[' constant_range_expression ']' } 
	// hierarchical_net_identifier [ { '[' constant_expression ']' } '[' constant_range_expression ']' ] 
	| '{' net_lvalue { ',' net_lvalue } '}'

variable_lvalue ::= 
	hierarchical_variable_identifier { '[' range_expression ']' } 
	// hierarchical_variable_identifier [ { '[' expression ']' } '[' range_expression ']' ] 
	| '{' variable_lvalue { ',' variable_lvalue } '}' 
	
lvalue_ ::= hierarchical_identifier { '[' range_expression ']' } | '{' lvalue_ { ',' lvalue_ } '}'
	// substitute of net_lvalue or variable_lvalue 

// A.8.6 Operators 

unary_operator ::= 
	'+' | '-' | '!' | '~' | '&' | '~&' | '|' | '~|' | '^' | '~^' | '^~' 

binary_operator ::= 
	'+' | '-' | '*' | '/' | '%' | '==' | '!=' | '===' | '!==' | '&&' | '||' | '**' 
	| '<' | '<=' | '>' | '>=' | '&' | '|' | '^' | '^~' | '~^' | '>>' | '<<' | '>>>' | '<<<' 

unary_module_path_operator ::= 
	'!' | '~' | '&' | '~&' | '|' | '~|' | '^' | '~^' | '^~' 

binary_module_path_operator ::= 
	'==' | '!=' | '&&' | '||' | '&' | '|' | '^' | '^~' | '~^' 

// A.8.7 Numbers 

number ::= 
	Realnum
	| Natural [ BasedInt | BaseFormat ( BaseValue | Natural ) ]
	| SizedBased
	| BasedInt
	| BaseFormat ( BaseValue | Natural )
	// decimal_number 
	// | octal_number 
	// | binary_number 
	// | hex_number 
	// | real_number 

real_number* ::= Realnum
	// unsigned_number '.' unsigned_number 
	// | unsigned_number [ '.' unsigned_number ] exp [ sign ] unsigned_number 

exp- ::= // e | E 

decimal_number- ::= 
	// unsigned_number 
	// | [ size ] decimal_base unsigned_number 
	// | [ size ] decimal_base x_digit { '_' } 
	// | [ size ] decimal_base z_digit { '_' } 

binary_number- ::= // [ size ] binary_base binary_value 

octal_number- ::= // [ size ] octal_base octal_value 

hex_number- ::= // [ size ] hex_base hex_value 

sign- ::= // '+' | '-' 

size- ::= // non_zero_unsigned_number 

non_zero_unsigned_number- ::= // non_zero_decimal_digit { '_' | decimal_digit } 

unsigned_number* ::= Natural
	// decimal_digit { '_' | decimal_digit } 

binary_value2- ::= // binary_digit { '_' | binary_digit } 

octal_value2- ::= // octal_digit { '_' | octal_digit } 

hex_value2- ::= // hex_digit { '_' | hex_digit } 

decimal_base- ::= // '\'[s|S]d' | '\'[s|S]D' 

binary_base- ::= // '\'[s|S]b' | '\'[s|S]B' 

octal_base- ::= // '\'[s|S]o' | '\'[s|S]O' 

hex_base- ::= // '\'[s|S]h' | '\'[s|S]H' 

non_zero_decimal_digit- ::= // '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' 

decimal_digit- ::= //  '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' 

binary_digit- ::= // x_digit | z_digit | '0' | '1' 

octal_digit- ::= // x_digit | z_digit | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' 

hex_digit- ::= 
	// x_digit | z_digit | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' 
	// | a | b | c | d | e | f | A | B | C | D | E | F 

x_digit- ::= // x | X 

z_digit- ::= // z | Z | '?' 

// A.8.8 Strings 

string* ::= Str
	// '"' { Any_ASCII_Characters_except_new_line } '"' 

// A.9 General 

// A.9.1 Attributes 

attribute_instance- ::= '(*' attr_spec { ',' attr_spec } '*)' 

attr_spec- ::= 
	attr_name [ '=' constant_expression ] 

attr_name- ::= identifier 

// A.9.2 Comments 

comment- ::= '/*' '*/' '//'
	// one_line_comment 
	// | block_comment 

// one_line_comment ::= '//' comment_text '\n' 

// block_comment ::= '/*' comment_text '*/' 

// comment_text ::= { Any_ASCII_character } 

// A.9.3 Identifiers 

block_identifier* ::= identifier 

cell_identifier* ::= identifier 

config_identifier* ::= identifier 

// escaped_identifier ::= '\' { Any_ASCII_character_except_white_space } white_space 

event_identifier* ::= identifier 

function_identifier* ::= identifier 

gate_instance_identifier* ::= identifier 

generate_block_identifier* ::= identifier 

genvar_identifier* ::= identifier 

hierarchical_block_identifier- ::= hierarchical_identifier 

hierarchical_event_identifier* ::= hierarchical_identifier 

hierarchical_function_identifier- ::= hierarchical_identifier 

hierarchical_identifier ::= 
	// { identifier [ '[' constant_expression ']' ] '.' } identifier 
	identifier [ '[' range_expression ']' ] 
		{ '.' identifier [ '[' range_expression ']' ] } // range wegen rvalue_or_function_call_

hierarchical_net_identifier* ::= hierarchical_identifier 

hierarchical_parameter_identifier* ::= hierarchical_identifier 

hierarchical_variable_identifier* ::= hierarchical_identifier 

hierarchical_task_identifier- ::= hierarchical_identifier 

identifier* ::= Ident
	// simple_identifier 
	// | escaped_identifier 
	
system_identifier_* ::= SysName
	// $ [ a-zA-Z0-9_$ ] { [ a-zA-Z0-9_$ ] } 

inout_port_identifier- ::= identifier 

input_port_identifier* ::= identifier 

instance_identifier* ::= identifier 

library_identifier* ::= identifier 

module_identifier* ::= identifier 

module_instance_identifier- ::= identifier 

net_identifier* ::= identifier 

output_port_identifier* ::= identifier 

parameter_identifier* ::= identifier 

port_identifier* ::= identifier 

real_identifier* ::= identifier 

// simple_identifier ::= [ a-zA-Z_ ] { [ a-zA-Z0-9_$ ] } 

specparam_identifier* ::= identifier 

system_function_identifier* ::= system_identifier_ 
	// $ [ a-zA-Z0-9_$ ] { [ a-zA-Z0-9_$ ] } 

system_task_identifier* ::= system_identifier_ 
	// $ [ a-zA-Z0-9_$ ] { [ a-zA-Z0-9_$ ] } 

task_identifier* ::= identifier 

terminal_identifier* ::= identifier 

text_macro_identifier- ::= identifier 

topmodule_identifier* ::= identifier 

udp_identifier* ::= identifier 

udp_instance_identifier- ::= identifier 

variable_identifier* ::= identifier 

// A.9.4 White space 

// white_space ::=  space | tab | newline | eof 

///// SystemVerilog 12 Extension
#ifdef SV12

%keywords += logic property endproperty assert assume cover restrict iff
	strong weak nexttime s_nexttime s_always s_eventually eventually
	until s_until until_with s_until_with implies accept_on reject_on sync_accept_on
	sync_reject_on dist within throughout first_match intersect final sequence

reg_* ::= reg | logic

assert_statement_ ::= 
	// merges assert_property_statement, simple_immediate_assert_statement and deferred_immediate_assert_statement
	assert [ '#' Natural | final | property ] '(' property_spec ')' action_block // '#0' nicht geeignet als Terminal da Kollision mit Delay value

assume_statement_ ::= 
	// merges assume_property_statement, simple_immediate_assume_statement and deferred_immediate_assume_statement
	assume [ '#' Natural | final | property ] '(' property_spec ')' action_block 

cover_statement_ ::= 
	// merges cover_property_statement, simple_immediate_cover_statement and deferred_immediate_cover_statement
	cover [ '#' Natural | final | property ] '(' property_spec ')' statement_or_null 

cover_sequence_statement ::= 
	cover sequence '(' [ clocking_event ] [ disable iff '(' expression_or_dist ')' ] sequence_expr ')' statement_or_null 

restrict_property_statement ::= 
	restrict [ property ] '(' property_spec ')' ';' // DEVIATION original ist property nicht optional, aber in Zipcpu schon
	
action_block* ::= 
	statement_or_null [ else statement_or_null ]
	// statement_or_null 
	// | [ statement ] else statement_or_null 

// immediate_assertion_statement- ::= 
//	simple_immediate_assertion_statement 
//	| deferred_immediate_assertion_statement 

immediate_assertion_statement_* ::= 
	assert_statement_ 
	| assume_statement_ 
	| cover_statement_ 
	
procedural_assertion_statement* ::= 
	concurrent_assertion_statement
	// concurrent_assertion_statement 
	// | immediate_assertion_statement 
	// | checker_instantiation 

concurrent_assertion_statement* ::= 
	\LL:2\ cover_sequence_statement 
	| immediate_assertion_statement_
	| restrict_property_statement 
	// assert_property_statement 
	// | assume_property_statement 
	// | cover_property_statement 
	// | cover_sequence_statement 
	// | restrict_property_statement 

// concurrent_assertion_item ::= 
// 	[ block_identifier ':' ] concurrent_assertion_statement 
//	| checker_instantiation 

// direkt in module_or_generate_item integriert wegen Konflikt mit module_instantiation
// assertion_item ::= 
// 	concurrent_assertion_item 
//	| deferred_immediate_assertion_item 

// merged with concurrent_assertion_item: 
// deferred_immediate_assertion_item ::= 
// 	[ block_identifier ':' ] deferred_immediate_assertion_statement 

property_spec ::= 
	[ clocking_event ] [ disable iff '(' expression_or_dist ')' ] property_expr 

clocking_event* ::= 
	'@' ( identifier | '(' event_expression ')' )

expression_or_dist* ::= 
	expression [ dist '{' dist_list '}' ]

dist_list* ::= 
	dist_item { ',' dist_item } 

dist_item ::= 
	value_range [ dist_weight ]
	
dist_weight* ::= 
	( ':=' | ':/' ) expression 
	
value_range* ::= 
	expression 
	| '[' expression ':' expression ']'

property_expr ::= 
	// totally refactored and lr removed
	sequence_expr 
		[ 
			( '|->' | '|=>' | '#-#' | '#=#' ) property_expr 
			| '(' property_expr ')'
		] property_expr_nlr_
	| strong '(' sequence_expr ')' property_expr_nlr_
	| weak '(' sequence_expr ')' property_expr_nlr_
	| not property_expr property_expr_nlr_
	| if ( expression_or_dist ) property_expr [ else property_expr ] property_expr_nlr_
	| case ( expression_or_dist ) property_case_item { property_case_item } endcase property_expr_nlr_
	| nexttime [ '[' constant_expression ']' ] property_expr property_expr_nlr_
	| s_nexttime [ '[' constant_expression ']' ] property_expr property_expr_nlr_
	| always [ '[' cycle_delay_const_range_expression ']' ] property_expr property_expr_nlr_
	| s_always '[' constant_range ']' property_expr property_expr_nlr_
	| s_eventually [ '[' cycle_delay_const_range_expression ']' ] property_expr property_expr_nlr_
	| eventually '[' constant_range ']' property_expr property_expr_nlr_
	| accept_on '(' expression_or_dist ')' property_expr property_expr_nlr_
	| reject_on '(' expression_or_dist ')' property_expr property_expr_nlr_
	| sync_accept_on '(' expression_or_dist ')' property_expr property_expr_nlr_
	| sync_reject_on '(' expression_or_dist ')' property_expr property_expr_nlr_
	| clocking_event property_expr property_expr_nlr_
	//| property_instance 

property_expr_nlr_* ::=
	[
		or property_expr property_expr_nlr_
		| and property_expr property_expr_nlr_
		| until property_expr property_expr_nlr_
		| s_until property_expr property_expr_nlr_
		| until_with property_expr property_expr_nlr_
		| s_until_with property_expr property_expr_nlr_
		| implies property_expr property_expr_nlr_
		| iff property_expr property_expr_nlr_
	]

property_case_item ::= 
	expression_or_dist { ',' expression_or_dist } ':' property_expr [ ';' ] 
	| default [ ':' ] property_expr [ ';' ] 

constant_range* ::= 
	constant_expression ':' constant_expression

cycle_delay_const_range_expression* ::= 
	constant_expression ':' ( constant_expression | '$' )

sequence_expr ::= 
	// totally refactored an lr removed
	cycle_delay_range sequence_expr { cycle_delay_range sequence_expr } sequence_expr_nlr_
	| expression_or_dist ( [ boolean_abbrev ] | throughout sequence_expr ) sequence_expr_nlr_

sequence_expr_nlr_* ::=
	[
		and sequence_expr sequence_expr_nlr_
		| intersect sequence_expr sequence_expr_nlr_
		| or sequence_expr sequence_expr_nlr_
		| within sequence_expr sequence_expr_nlr_
	]

cycle_delay_range* ::= 
	// '##' constant_primary 
	// | '##' '[' cycle_delay_const_range_expression ']' 
	'##' [ cycle_delay_const_range_expression ]
	| '##[*]' 
	| '##[+]' 

boolean_abbrev* ::= 
	consecutive_repetition 
	| non_consecutive_repetition 
	| goto_repetition 

consecutive_repetition* ::= 
	'[*' const_or_range_expression ']' 
	| '[*]' 
	| '[+]' 

non_consecutive_repetition* ::= 
	'[=' const_or_range_expression ']' 

goto_repetition* ::= 
	'[->' const_or_range_expression ']' 

const_or_range_expression* ::= 
	// constant_expression |
	cycle_delay_const_range_expression 

#else
reg_* ::= reg
#endif

///// Weitere Terminals, um Lexer-Tokens zu erzeugen

Attribute ::=
Comment ::=
MacroUsage ::=
Section ::=
SectionEnd ::=
CoDi ::=
LineCont ::=
Realnum ::=        	// Kommazahl, ev. Exponent
Natural ::=        	// nur einzelne Dezimalzahl ohne Base
SizedBased ::=     	// vollständige Zahl aus Natural + BaseFormat + BaseValue
BasedInt ::=       	// BaseFormat + BaseValue
BaseFormat ::=     	// nur decimal_base, binary_base, octal_base oder hex_base
BaseValue ::=      	// nur decimal_value, binary_value, octal_value oder hex_value
SysName ::=        	// System name, starting with $
Ident ::=          	// Normal and Escaped ID
Str ::=			// Plain String

///// Pragmas
%namespace ::= 'Vl'
%module ::= 'Verilog'
