// This file was automatically generated by EbnfStudio; don't modify it!
#include "VlSynTree.h"
using namespace Vl;

SynTree::SynTree(quint16 r, const Token& t ):d_tok(r){
	d_tok.d_lineNr = t.d_lineNr;
	d_tok.d_colNr = t.d_colNr;
	d_tok.d_sourcePath = t.d_sourcePath;
}

const char* SynTree::rToStr( quint16 r ) {
	switch(r) {
		case R_always_construct: return "always_construct";
		case R_assert_statement_: return "assert_statement_";
		case R_assignment_: return "assignment_";
		case R_assignment_or_task_enable_: return "assignment_or_task_enable_";
		case R_assume_statement_: return "assume_statement_";
		case R_attr_name_: return "attr_name";
		case R_attr_spec_: return "attr_spec";
		case R_attribute_instance_: return "attribute_instance";
		case R_base_expression_: return "base_expression";
		case R_binary_module_path_operator: return "binary_module_path_operator";
		case R_binary_operator: return "binary_operator";
		case R_block_item_declaration: return "block_item_declaration";
		case R_block_real_type: return "block_real_type";
		case R_block_variable_type: return "block_variable_type";
		case R_blocking_assignment_: return "blocking_assignment";
		case R_case_generate_construct: return "case_generate_construct";
		case R_case_generate_item: return "case_generate_item";
		case R_case_item: return "case_item";
		case R_case_statement: return "case_statement";
		case R_cell_clause: return "cell_clause";
		case R_charge_strength: return "charge_strength";
		case R_checktime_condition: return "checktime_condition";
		case R_cmos_switch_instance: return "cmos_switch_instance";
		case R_cmos_switchtype: return "cmos_switchtype";
		case R_combinational_body_: return "combinational_body";
		case R_combinational_entry_: return "combinational_entry";
		case R_comment_: return "comment";
		case R_concatenation_: return "concatenation";
		case R_conditional_expression_: return "conditional_expression";
		case R_conditional_generate_construct: return "conditional_generate_construct";
		case R_conditional_statement: return "conditional_statement";
		case R_config_declaration: return "config_declaration";
		case R_config_rule_statement: return "config_rule_statement";
		case R_constant_base_expression_: return "constant_base_expression";
		case R_constant_concatenation_: return "constant_concatenation";
		case R_constant_expression: return "constant_expression";
		case R_constant_function_call_: return "constant_function_call";
		case R_constant_mintypmax_expression: return "constant_mintypmax_expression";
		case R_constant_multiple_concatenation_: return "constant_multiple_concatenation";
		case R_constant_primary_: return "constant_primary";
		case R_constant_range_expression: return "constant_range_expression";
		case R_constant_system_function_call_: return "constant_system_function_call";
		case R_continuous_assign: return "continuous_assign";
		case R_controlled_reference_event: return "controlled_reference_event";
		case R_controlled_timing_check_event: return "controlled_timing_check_event";
		case R_cover_sequence_statement: return "cover_sequence_statement";
		case R_cover_statement_: return "cover_statement_";
		case R_current_state_: return "current_state";
		case R_data_event: return "data_event";
		case R_data_source_expression: return "data_source_expression";
		case R_default_clause: return "default_clause";
		case R_defparam_assignment: return "defparam_assignment";
		case R_delay2: return "delay2";
		case R_delay3: return "delay3";
		case R_delay_control: return "delay_control";
		case R_delay_or_event_control: return "delay_or_event_control";
		case R_delay_value: return "delay_value";
		case R_delayed_data: return "delayed_data";
		case R_delayed_reference: return "delayed_reference";
		case R_description_: return "description";
		case R_design_statement: return "design_statement";
		case R_dimension: return "dimension";
		case R_dimension_constant_expression: return "dimension_constant_expression";
		case R_disable_statement: return "disable_statement";
		case R_dist_item: return "dist_item";
		case R_dlr_fullskew_timing_check: return "$fullskew_timing_check";
		case R_dlr_hold_timing_check: return "$hold_timing_check";
		case R_dlr_nochange_timing_check: return "$nochange_timing_check";
		case R_dlr_period_timing_check: return "$period_timing_check";
		case R_dlr_recovery_timing_check: return "$recovery_timing_check";
		case R_dlr_recrem_timing_check: return "$recrem_timing_check";
		case R_dlr_removal_timing_check: return "$removal_timing_check";
		case R_dlr_setup_timing_check: return "$setup_timing_check";
		case R_dlr_setuphold_timing_check: return "$setuphold_timing_check";
		case R_dlr_skew_timing_check: return "$skew_timing_check";
		case R_dlr_timeskew_timing_check: return "$timeskew_timing_check";
		case R_dlr_width_timing_check: return "$width_timing_check";
		case R_drive_strength: return "drive_strength";
		case R_edge_control_specifier: return "edge_control_specifier";
		case R_edge_descriptor: return "edge_descriptor";
		case R_edge_identifier: return "edge_identifier";
		case R_edge_indicator_: return "edge_indicator";
		case R_edge_input_list_: return "edge_input_list";
		case R_edge_sensitive_path_declaration_: return "edge_sensitive_path_declaration";
		case R_edge_symbol_: return "edge_symbol";
		case R_enable_gate_instance: return "enable_gate_instance";
		case R_enable_gatetype: return "enable_gatetype";
		case R_enable_terminal: return "enable_terminal";
		case R_end_edge_offset: return "end_edge_offset";
		case R_entry_symbol_: return "entry_symbol_";
		case R_error_limit_value: return "error_limit_value";
		case R_event_based_flag: return "event_based_flag";
		case R_event_control: return "event_control";
		case R_event_declaration: return "event_declaration";
		case R_event_expression: return "event_expression";
		case R_event_expression_nlr_: return "event_expression_nlr_";
		case R_event_trigger: return "event_trigger";
		case R_expression: return "expression";
		case R_expression1_: return "expression1";
		case R_expression2: return "expression2";
		case R_expression3: return "expression3";
		case R_expression_nlr_: return "expression_nlr_";
		case R_file_path_glyph_: return "file_path_glyph_";
		case R_file_path_spec: return "file_path_spec";
		case R_full_edge_sensitive_path_description_: return "full_edge_sensitive_path_description";
		case R_full_path_description_: return "full_path_description";
		case R_function_call_: return "function_call";
		case R_function_declaration: return "function_declaration";
		case R_function_item_declaration_: return "function_item_declaration";
		case R_function_port_list: return "function_port_list";
		case R_function_range_or_type: return "function_range_or_type";
		case R_function_statement: return "function_statement";
		case R_gate_instantiation: return "gate_instantiation";
		case R_generate_block: return "generate_block";
		case R_generate_region: return "generate_region";
		case R_genvar_declaration: return "genvar_declaration";
		case R_genvar_expression: return "genvar_expression";
		case R_genvar_expression_nlr_: return "genvar_expression_nlr_";
		case R_genvar_initialization: return "genvar_initialization";
		case R_genvar_iteration: return "genvar_iteration";
		case R_genvar_primary: return "genvar_primary";
		case R_hierarchical_block_identifier_: return "hierarchical_block_identifier";
		case R_hierarchical_function_identifier_: return "hierarchical_function_identifier";
		case R_hierarchical_identifier: return "hierarchical_identifier";
		case R_hierarchical_task_identifier_: return "hierarchical_task_identifier";
		case R_if_generate_construct: return "if_generate_construct";
		case R_include_statement: return "include_statement";
		case R_init_val: return "init_val";
		case R_initial_construct: return "initial_construct";
		case R_inout_declaration: return "inout_declaration";
		case R_inout_port_identifier_: return "inout_port_identifier";
		case R_inout_terminal: return "inout_terminal";
		case R_input_declaration: return "input_declaration";
		case R_input_identifier_: return "input_identifier";
		case R_input_terminal: return "input_terminal";
		case R_inst_clause: return "inst_clause";
		case R_inst_name: return "inst_name";
		case R_integer_declaration: return "integer_declaration";
		case R_level_input_list_: return "level_input_list";
		case R_level_symbol_: return "level_symbol";
		case R_liblist_clause: return "liblist_clause";
		case R_library_declaration: return "library_declaration";
		case R_library_description_: return "library_description";
		case R_library_text_: return "library_text";
		case R_list_of_block_real_identifiers: return "list_of_block_real_identifiers";
		case R_list_of_block_variable_identifiers: return "list_of_block_variable_identifiers";
		case R_list_of_defparam_assignments: return "list_of_defparam_assignments";
		case R_list_of_event_identifiers: return "list_of_event_identifiers";
		case R_list_of_net_assignments: return "list_of_net_assignments";
		case R_list_of_net_decl_assignments_: return "list_of_net_decl_assignments";
		case R_list_of_net_identifiers_: return "list_of_net_identifiers";
		case R_list_of_net_identifiers_of_decl_assignments_: return "list_of_net_identifiers_of_decl_assignments_";
		case R_list_of_param_assignments: return "list_of_param_assignments";
		case R_list_of_parameter_assignments_: return "list_of_parameter_assignments";
		case R_list_of_path_delay_expressions: return "list_of_path_delay_expressions";
		case R_list_of_path_inouts_: return "list_of_path_inouts_";
		case R_list_of_path_inputs_: return "list_of_path_inputs";
		case R_list_of_path_outputs: return "list_of_path_outputs";
		case R_list_of_port_connections_: return "list_of_port_connections";
		case R_list_of_port_declarations: return "list_of_port_declarations";
		case R_list_of_ports: return "list_of_ports";
		case R_list_of_real_identifiers: return "list_of_real_identifiers";
		case R_list_of_specparam_assignments: return "list_of_specparam_assignments";
		case R_list_of_variable_identifiers: return "list_of_variable_identifiers";
		case R_list_of_variable_port_identifiers: return "list_of_variable_port_identifiers";
		case R_local_parameter_declaration: return "local_parameter_declaration";
		case R_loop_generate_construct: return "loop_generate_construct";
		case R_loop_statement: return "loop_statement";
		case R_lsb_constant_expression: return "lsb_constant_expression";
		case R_lvalue_: return "lvalue_";
		case R_mintypmax_expression: return "mintypmax_expression";
		case R_mod_path_single_or_multi_concat_: return "mod_path_single_or_multi_concat_";
		case R_module_declaration: return "module_declaration";
		case R_module_instance_: return "module_instance";
		case R_module_instance_identifier_: return "module_instance_identifier";
		case R_module_instantiation_: return "module_instantiation";
		case R_module_item_: return "module_item";
		case R_module_or_generate_item: return "module_or_generate_item";
		case R_module_or_generate_item_declaration: return "module_or_generate_item_declaration";
		case R_module_or_udp_instance_: return "module_or_udp_instance_";
		case R_module_or_udp_instantiation_: return "module_or_udp_instantiation_";
		case R_module_parameter_port_list: return "module_parameter_port_list";
		case R_module_path_concatenation_: return "module_path_concatenation";
		case R_module_path_conditional_expression_: return "module_path_conditional_expression";
		case R_module_path_expression: return "module_path_expression";
		case R_module_path_expression_nlr_: return "module_path_expression_nlr_";
		case R_module_path_mintypmax_expression: return "module_path_mintypmax_expression";
		case R_module_path_multiple_concatenation_: return "module_path_multiple_concatenation";
		case R_module_path_primary: return "module_path_primary";
		case R_mos_switch_instance: return "mos_switch_instance";
		case R_mos_switchtype: return "mos_switchtype";
		case R_msb_constant_expression: return "msb_constant_expression";
		case R_multiple_concatenation_: return "multiple_concatenation";
		case R_n_input_gate_instance: return "n_input_gate_instance";
		case R_n_input_gatetype: return "n_input_gatetype";
		case R_n_output_gate_instance: return "n_output_gate_instance";
		case R_n_output_gatetype: return "n_output_gatetype";
		case R_name_of_gate_instance: return "name_of_gate_instance";
		case R_name_of_module_instance_: return "name_of_module_instance";
		case R_name_of_udp_instance_: return "name_of_udp_instance";
		case R_named_parameter_assignment: return "named_parameter_assignment";
		case R_named_port_connection_: return "named_port_connection";
		case R_ncontrol_terminal: return "ncontrol_terminal";
		case R_net_assignment: return "net_assignment";
		case R_net_decl_assignment_: return "net_decl_assignment";
		case R_net_declaration: return "net_declaration";
		case R_net_lvalue: return "net_lvalue";
		case R_net_type: return "net_type";
		case R_next_state_: return "next_state";
		case R_non_port_module_item: return "non_port_module_item";
		case R_nonblocking_assignment_: return "nonblocking_assignment";
		case R_notifier: return "notifier";
		case R_number: return "number";
		case R_ordered_parameter_assignment_: return "ordered_parameter_assignment";
		case R_ordered_port_connection_: return "ordered_port_connection";
		case R_output_declaration: return "output_declaration";
		case R_output_identifier: return "output_identifier";
		case R_output_symbol_: return "output_symbol";
		case R_output_terminal: return "output_terminal";
		case R_output_variable_type: return "output_variable_type";
		case R_par_block: return "par_block";
		case R_parallel_edge_sensitive_path_description_: return "parallel_edge_sensitive_path_description";
		case R_parallel_path_description_: return "parallel_path_description";
		case R_param_assignment: return "param_assignment";
		case R_parameter_declaration: return "parameter_declaration";
		case R_parameter_override: return "parameter_override";
		case R_parameter_type: return "parameter_type";
		case R_parameter_value_assignment_: return "parameter_value_assignment";
		case R_parameter_value_assignment_or_delay2_: return "parameter_value_assignment_or_delay2_";
		case R_pass_en_switchtype: return "pass_en_switchtype";
		case R_pass_enable_switch_instance: return "pass_enable_switch_instance";
		case R_pass_switch_instance: return "pass_switch_instance";
		case R_pass_switchtype: return "pass_switchtype";
		case R_path_declaration: return "path_declaration";
		case R_path_delay_expression: return "path_delay_expression";
		case R_path_delay_value: return "path_delay_value";
		case R_path_description_: return "path_description_";
		case R_pcontrol_terminal: return "pcontrol_terminal";
		case R_polarity_operator: return "polarity_operator";
		case R_port: return "port";
		case R_port_connection_or_output_terminal_: return "port_connection_or_output_terminal_";
		case R_port_declaration: return "port_declaration";
		case R_port_expression: return "port_expression";
		case R_port_reference: return "port_reference";
		case R_primary: return "primary";
		case R_procedural_continuous_assignments: return "procedural_continuous_assignments";
		case R_procedural_timing_control: return "procedural_timing_control";
		case R_procedural_timing_control_statement: return "procedural_timing_control_statement";
		case R_property_case_item: return "property_case_item";
		case R_property_expr: return "property_expr";
		case R_property_spec: return "property_spec";
		case R_pull_gate_instance: return "pull_gate_instance";
		case R_pulldown_strength: return "pulldown_strength";
		case R_pullup_strength: return "pullup_strength";
		case R_pulse_control_specparam: return "pulse_control_specparam";
		case R_pulsestyle_declaration: return "pulsestyle_declaration";
		case R_range: return "range";
		case R_range_expression: return "range_expression";
		case R_real_declaration: return "real_declaration";
		case R_real_type: return "real_type";
		case R_realtime_declaration: return "realtime_declaration";
		case R_reference_event: return "reference_event";
		case R_reg_declaration: return "reg_declaration";
		case R_reject_limit_value: return "reject_limit_value";
		case R_remain_active_flag: return "remain_active_flag";
		case R_restrict_property_statement: return "restrict_property_statement";
		case R_rvalue_or_function_call_: return "rvalue_or_function_call_";
		case R_scalar_constant: return "scalar_constant";
		case R_scalar_timing_check_condition: return "scalar_timing_check_condition";
		case R_seq_block: return "seq_block";
		case R_seq_input_list_: return "seq_input_list";
		case R_sequence_expr: return "sequence_expr";
		case R_sequential_body_: return "sequential_body";
		case R_sequential_entry_: return "sequential_entry";
		case R_showcancelled_declaration: return "showcancelled_declaration";
		case R_simple_path_declaration: return "simple_path_declaration";
		case R_single_or_multiple_concatenation_: return "single_or_multiple_concatenation_";
		case R_source_text_: return "source_text";
		case R_specify_block: return "specify_block";
		case R_specify_input_terminal_descriptor_: return "specify_input_terminal_descriptor";
		case R_specify_item: return "specify_item";
		case R_specify_output_terminal_descriptor: return "specify_output_terminal_descriptor";
		case R_specify_terminal_descriptor: return "specify_terminal_descriptor";
		case R_specparam_assignment: return "specparam_assignment";
		case R_specparam_declaration: return "specparam_declaration";
		case R_stamptime_condition: return "stamptime_condition";
		case R_start_edge_offset: return "start_edge_offset";
		case R_state_dependent_path_declaration: return "state_dependent_path_declaration";
		case R_statement: return "statement";
		case R_statement_or_null: return "statement_or_null";
		case R_system_function_call: return "system_function_call";
		case R_system_task_enable: return "system_task_enable";
		case R_system_timing_check: return "system_timing_check";
		case R_t01_path_delay_expression_: return "t01_path_delay_expression";
		case R_t0x_path_delay_expression_: return "t0x_path_delay_expression";
		case R_t0z_path_delay_expression_: return "t0z_path_delay_expression";
		case R_t10_path_delay_expression_: return "t10_path_delay_expression";
		case R_t1x_path_delay_expression_: return "t1x_path_delay_expression";
		case R_t1z_path_delay_expression_: return "t1z_path_delay_expression";
		case R_t_path_delay_expression_: return "t_path_delay_expression";
		case R_task_declaration: return "task_declaration";
		case R_task_enable_: return "task_enable";
		case R_task_item_declaration: return "task_item_declaration";
		case R_task_port_item: return "task_port_item";
		case R_task_port_list: return "task_port_list";
		case R_task_port_type: return "task_port_type";
		case R_text_macro_identifier_: return "text_macro_identifier";
		case R_tf_inout_declaration: return "tf_inout_declaration";
		case R_tf_input_declaration: return "tf_input_declaration";
		case R_tf_output_declaration: return "tf_output_declaration";
		case R_tfall_path_delay_expression_: return "tfall_path_delay_expression";
		case R_threshold: return "threshold";
		case R_time_declaration: return "time_declaration";
		case R_timing_check_condition: return "timing_check_condition";
		case R_timing_check_event: return "timing_check_event";
		case R_timing_check_event_control: return "timing_check_event_control";
		case R_timing_check_limit: return "timing_check_limit";
		case R_trise_path_delay_expression_: return "trise_path_delay_expression";
		case R_tx0_path_delay_expression_: return "tx0_path_delay_expression";
		case R_tx1_path_delay_expression_: return "tx1_path_delay_expression";
		case R_txz_path_delay_expression_: return "txz_path_delay_expression";
		case R_tz0_path_delay_expression_: return "tz0_path_delay_expression";
		case R_tz1_path_delay_expression_: return "tz1_path_delay_expression";
		case R_tz_path_delay_expression_: return "tz_path_delay_expression";
		case R_tzx_path_delay_expression_: return "tzx_path_delay_expression";
		case R_udp_body: return "udp_body";
		case R_udp_body_entry_: return "udp_body_entry_";
		case R_udp_declaration: return "udp_declaration";
		case R_udp_declaration_port_list: return "udp_declaration_port_list";
		case R_udp_initial_statement: return "udp_initial_statement";
		case R_udp_input_declaration: return "udp_input_declaration";
		case R_udp_instance_: return "udp_instance";
		case R_udp_instance_identifier_: return "udp_instance_identifier";
		case R_udp_instantiation_: return "udp_instantiation";
		case R_udp_output_declaration: return "udp_output_declaration";
		case R_udp_port_declaration: return "udp_port_declaration";
		case R_udp_port_list: return "udp_port_list";
		case R_udp_reg_declaration: return "udp_reg_declaration";
		case R_unary_module_path_operator: return "unary_module_path_operator";
		case R_unary_operator: return "unary_operator";
		case R_use_clause: return "use_clause";
		case R_variable_assignment: return "variable_assignment";
		case R_variable_lvalue: return "variable_lvalue";
		case R_variable_type: return "variable_type";
		case R_wait_statement: return "wait_statement";
		case R_width_constant_expression_: return "width_constant_expression";
	default: if(r<R_First) return tokenTypeName(r); else return "";
}
}
