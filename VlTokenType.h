#ifndef __VL_TOKENTYPE__
#define __VL_TOKENTYPE__
// This file was automatically generated by EbnfStudio; don't modify it!


#include <QByteArray>

namespace Vl {
	enum TokenType {
		Tok_Invalid = 0,

		TT_Literals,
		Tok_Bang,
		Tok_BangEq,
		Tok_Bang2Eq,
		Tok_Hash,
		Tok_2Hash,
		Tok_2HashLbrackStarRbrack,
		Tok_2HashLbrackPlusRbrack,
		Tok_Hash2Minus,
		Tok_Hash2Eq,
		Tok_Dlr,
		Tok_Percent,
		Tok_Amp,
		Tok_2Amp,
		Tok_3Amp,
		Tok_Lpar,
		Tok_Latt,
		Tok_Rpar,
		Tok_Star,
		Tok_Ratt,
		Tok_2Star,
		Tok_Rcmt,
		Tok_StarGt,
		Tok_Plus,
		Tok_PlusColon,
		Tok_Comma,
		Tok_Minus,
		Tok_MinusColon,
		Tok_MinusGt,
		Tok_Dot,
		Tok_Slash,
		Tok_Lcmt,
		Tok_Colon,
		Tok_ColonSlash,
		Tok_ColonEq,
		Tok_Semi,
		Tok_Lt,
		Tok_2Lt,
		Tok_3Lt,
		Tok_Leq,
		Tok_Eq,
		Tok_2Eq,
		Tok_3Eq,
		Tok_EqGt,
		Tok_Gt,
		Tok_Geq,
		Tok_2Gt,
		Tok_3Gt,
		Tok_Qmark,
		Tok_At,
		Tok_Lbrack,
		Tok_LbrackStar,
		Tok_Lbrack2Star,
		Tok_Lbrack2Plus,
		Tok_Lbrack2Minus,
		Tok_LbrackEq,
		Tok_Rbrack,
		Tok_Hat,
		Tok_HatTilde,
		Tok_Lbrace,
		Tok_Bar,
		Tok_Bar2Minus,
		Tok_Bar2Eq,
		Tok_2Bar,
		Tok_Rbrace,
		Tok_Tilde,
		Tok_TildeAmp,
		Tok_TildeHat,
		Tok_TildeBar,

		TT_Keywords,
		Tok_dlr_fullskew,
		Tok_dlr_hold,
		Tok_dlr_nochange,
		Tok_dlr_period,
		Tok_dlr_recovery,
		Tok_dlr_recrem,
		Tok_dlr_removal,
		Tok_dlr_setup,
		Tok_dlr_setuphold,
		Tok_dlr_skew,
		Tok_dlr_timeskew,
		Tok_dlr_width,
		Tok_PATHPULSE_dlr,
		Tok_accept_on,
		Tok_always,
		Tok_and,
		Tok_assert,
		Tok_assign,
		Tok_assume,
		Tok_automatic,
		Tok_begin,
		Tok_buf,
		Tok_bufif0,
		Tok_bufif1,
		Tok_case,
		Tok_casex,
		Tok_casez,
		Tok_cell,
		Tok_cmos,
		Tok_config,
		Tok_cover,
		Tok_deassign,
		Tok_default,
		Tok_defparam,
		Tok_design,
		Tok_disable,
		Tok_dist,
		Tok_edge,
		Tok_else,
		Tok_end,
		Tok_endcase,
		Tok_endconfig,
		Tok_endfunction,
		Tok_endgenerate,
		Tok_endmodule,
		Tok_endprimitive,
		Tok_endspecify,
		Tok_endtable,
		Tok_endtask,
		Tok_event,
		Tok_eventually,
		Tok_final,
		Tok_for,
		Tok_force,
		Tok_forever,
		Tok_fork,
		Tok_function,
		Tok_generate,
		Tok_genvar,
		Tok_highz0,
		Tok_highz1,
		Tok_if,
		Tok_iff,
		Tok_ifnone,
		Tok_implies,
		Tok_incdir,
		Tok_include,
		Tok_initial,
		Tok_inout,
		Tok_input,
		Tok_instance,
		Tok_integer,
		Tok_intersect,
		Tok_join,
		Tok_large,
		Tok_liblist,
		Tok_library,
		Tok_localparam,
		Tok_logic,
		Tok_macromodule,
		Tok_medium,
		Tok_module,
		Tok_nand,
		Tok_negedge,
		Tok_nexttime,
		Tok_nmos,
		Tok_nor,
		Tok_noshowcancelled,
		Tok_not,
		Tok_notif0,
		Tok_notif1,
		Tok_or,
		Tok_output,
		Tok_parameter,
		Tok_pmos,
		Tok_posedge,
		Tok_primitive,
		Tok_property,
		Tok_pull0,
		Tok_pull1,
		Tok_pulldown,
		Tok_pullup,
		Tok_pulsestyle_ondetect,
		Tok_pulsestyle_onevent,
		Tok_rcmos,
		Tok_real,
		Tok_realtime,
		Tok_reg,
		Tok_reject_on,
		Tok_release,
		Tok_repeat,
		Tok_restrict,
		Tok_rnmos,
		Tok_rpmos,
		Tok_rtran,
		Tok_rtranif0,
		Tok_rtranif1,
		Tok_s_always,
		Tok_s_eventually,
		Tok_s_nexttime,
		Tok_s_until,
		Tok_s_until_with,
		Tok_scalared,
		Tok_sequence,
		Tok_showcancelled,
		Tok_signed,
		Tok_small,
		Tok_specify,
		Tok_specparam,
		Tok_strong,
		Tok_strong0,
		Tok_strong1,
		Tok_supply0,
		Tok_supply1,
		Tok_sync_accept_on,
		Tok_sync_reject_on,
		Tok_table,
		Tok_task,
		Tok_throughout,
		Tok_time,
		Tok_tran,
		Tok_tranif0,
		Tok_tranif1,
		Tok_tri,
		Tok_tri0,
		Tok_tri1,
		Tok_triand,
		Tok_trior,
		Tok_trireg,
		Tok_until,
		Tok_until_with,
		Tok_use,
		Tok_uwire,
		Tok_vectored,
		Tok_wait,
		Tok_wand,
		Tok_weak,
		Tok_weak0,
		Tok_weak1,
		Tok_while,
		Tok_wire,
		Tok_within,
		Tok_wor,
		Tok_xnor,
		Tok_xor,

		TT_Specials,
		Tok_Attribute,
		Tok_Comment,
		Tok_MacroUsage,
		Tok_Section,
		Tok_SectionEnd,
		Tok_CoDi,
		Tok_LineCont,
		Tok_Realnum,
		Tok_Natural,
		Tok_SizedBased,
		Tok_BasedInt,
		Tok_BaseFormat,
		Tok_BaseValue,
		Tok_SysName,
		Tok_Ident,
		Tok_Str,
		Tok_Eof,

		TT_MaxToken,

		TT_Max
	};

	const char* tokenTypeString( int ); // Pretty with punctuation chars
	const char* tokenTypeName( int ); // Just the names without punctuation chars
	bool tokenTypeIsLiteral( int );
	bool tokenTypeIsKeyword( int );
	bool tokenTypeIsSpecial( int );
	TokenType tokenTypeFromString( const QByteArray& str, int* pos = 0 );
}
#endif // __VL_TOKENTYPE__
