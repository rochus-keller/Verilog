// This file was automatically generated by EbnfStudio; don't modify it!
#include "VlTokenType.h"

namespace Vl {
	const char* tokenTypeString( int r ) {
		switch(r) {
			case Tok_Invalid: return "<invalid>";
			case Tok_Bang: return "!";
			case Tok_BangEq: return "!=";
			case Tok_Bang2Eq: return "!==";
			case Tok_Hash: return "#";
			case Tok_2Hash: return "##";
			case Tok_2HashLbrackStarRbrack: return "##[*]";
			case Tok_2HashLbrackPlusRbrack: return "##[+]";
			case Tok_HashMinusHash: return "#-#";
			case Tok_HashEqHash: return "#=#";
			case Tok_Dlr: return "$";
			case Tok_Percent: return "%";
			case Tok_Amp: return "&";
			case Tok_2Amp: return "&&";
			case Tok_3Amp: return "&&&";
			case Tok_Lpar: return "(";
			case Tok_Latt: return "(*";
			case Tok_LparStarRpar: return "(*)";
			case Tok_Rpar: return ")";
			case Tok_Star: return "*";
			case Tok_Ratt: return "*)";
			case Tok_2Star: return "**";
			case Tok_Rcmt: return "*/";
			case Tok_StarGt: return "*>";
			case Tok_Plus: return "+";
			case Tok_PlusColon: return "+:";
			case Tok_Comma: return ",";
			case Tok_Minus: return "-";
			case Tok_MinusColon: return "-:";
			case Tok_MinusGt: return "->";
			case Tok_Dot: return ".";
			case Tok_2Dot: return "..";
			case Tok_3Dot: return "...";
			case Tok_Slash: return "/";
			case Tok_Lcmt: return "/*";
			case Tok_2Slash: return "//";
			case Tok_Colon: return ":";
			case Tok_ColonSlash: return ":/";
			case Tok_ColonEq: return ":=";
			case Tok_Semi: return ";";
			case Tok_Lt: return "<";
			case Tok_2Lt: return "<<";
			case Tok_3Lt: return "<<<";
			case Tok_Leq: return "<=";
			case Tok_Eq: return "=";
			case Tok_2Eq: return "==";
			case Tok_3Eq: return "===";
			case Tok_EqGt: return "=>";
			case Tok_Gt: return ">";
			case Tok_Geq: return ">=";
			case Tok_2Gt: return ">>";
			case Tok_3Gt: return ">>>";
			case Tok_Qmark: return "?";
			case Tok_At: return "@";
			case Tok_Lbrack: return "[";
			case Tok_LbrackStar: return "[*";
			case Tok_LbrackStarRbrack: return "[*]";
			case Tok_LbrackPlusRbrack: return "[+]";
			case Tok_LbrackMinusGt: return "[->";
			case Tok_LbrackEq: return "[=";
			case Tok_Rbrack: return "]";
			case Tok_Hat: return "^";
			case Tok_HatTilde: return "^~";
			case Tok_Lbrace: return "{";
			case Tok_Bar: return "|";
			case Tok_BarMinusGt: return "|->";
			case Tok_BarEqGt: return "|=>";
			case Tok_2Bar: return "||";
			case Tok_Rbrace: return "}";
			case Tok_Tilde: return "~";
			case Tok_TildeAmp: return "~&";
			case Tok_TildeHat: return "~^";
			case Tok_TildeBar: return "~|";
			case Tok_dlr_fullskew: return "$fullskew";
			case Tok_dlr_hold: return "$hold";
			case Tok_dlr_nochange: return "$nochange";
			case Tok_dlr_period: return "$period";
			case Tok_dlr_recovery: return "$recovery";
			case Tok_dlr_recrem: return "$recrem";
			case Tok_dlr_removal: return "$removal";
			case Tok_dlr_setup: return "$setup";
			case Tok_dlr_setuphold: return "$setuphold";
			case Tok_dlr_skew: return "$skew";
			case Tok_dlr_timeskew: return "$timeskew";
			case Tok_dlr_width: return "$width";
			case Tok_PATHPULSE_dlr: return "PATHPULSE$";
			case Tok_accept_on: return "accept_on";
			case Tok_always: return "always";
			case Tok_and: return "and";
			case Tok_assert: return "assert";
			case Tok_assign: return "assign";
			case Tok_assume: return "assume";
			case Tok_automatic: return "automatic";
			case Tok_begin: return "begin";
			case Tok_buf: return "buf";
			case Tok_bufif0: return "bufif0";
			case Tok_bufif1: return "bufif1";
			case Tok_case: return "case";
			case Tok_casex: return "casex";
			case Tok_casez: return "casez";
			case Tok_cell: return "cell";
			case Tok_cmos: return "cmos";
			case Tok_config: return "config";
			case Tok_cover: return "cover";
			case Tok_deassign: return "deassign";
			case Tok_default: return "default";
			case Tok_defparam: return "defparam";
			case Tok_design: return "design";
			case Tok_disable: return "disable";
			case Tok_dist: return "dist";
			case Tok_edge: return "edge";
			case Tok_else: return "else";
			case Tok_end: return "end";
			case Tok_endcase: return "endcase";
			case Tok_endconfig: return "endconfig";
			case Tok_endfunction: return "endfunction";
			case Tok_endgenerate: return "endgenerate";
			case Tok_endmodule: return "endmodule";
			case Tok_endprimitive: return "endprimitive";
			case Tok_endspecify: return "endspecify";
			case Tok_endtable: return "endtable";
			case Tok_endtask: return "endtask";
			case Tok_event: return "event";
			case Tok_eventually: return "eventually";
			case Tok_final: return "final";
			case Tok_for: return "for";
			case Tok_force: return "force";
			case Tok_forever: return "forever";
			case Tok_fork: return "fork";
			case Tok_function: return "function";
			case Tok_generate: return "generate";
			case Tok_genvar: return "genvar";
			case Tok_highz0: return "highz0";
			case Tok_highz1: return "highz1";
			case Tok_if: return "if";
			case Tok_iff: return "iff";
			case Tok_ifnone: return "ifnone";
			case Tok_implies: return "implies";
			case Tok_incdir: return "incdir";
			case Tok_include: return "include";
			case Tok_initial: return "initial";
			case Tok_inout: return "inout";
			case Tok_input: return "input";
			case Tok_instance: return "instance";
			case Tok_integer: return "integer";
			case Tok_intersect: return "intersect";
			case Tok_join: return "join";
			case Tok_large: return "large";
			case Tok_liblist: return "liblist";
			case Tok_library: return "library";
			case Tok_localparam: return "localparam";
			case Tok_logic: return "logic";
			case Tok_macromodule: return "macromodule";
			case Tok_medium: return "medium";
			case Tok_module: return "module";
			case Tok_nand: return "nand";
			case Tok_negedge: return "negedge";
			case Tok_nexttime: return "nexttime";
			case Tok_nmos: return "nmos";
			case Tok_nor: return "nor";
			case Tok_noshowcancelled: return "noshowcancelled";
			case Tok_not: return "not";
			case Tok_notif0: return "notif0";
			case Tok_notif1: return "notif1";
			case Tok_or: return "or";
			case Tok_output: return "output";
			case Tok_parameter: return "parameter";
			case Tok_pmos: return "pmos";
			case Tok_posedge: return "posedge";
			case Tok_primitive: return "primitive";
			case Tok_property: return "property";
			case Tok_pull0: return "pull0";
			case Tok_pull1: return "pull1";
			case Tok_pulldown: return "pulldown";
			case Tok_pullup: return "pullup";
			case Tok_pulsestyle_ondetect: return "pulsestyle_ondetect";
			case Tok_pulsestyle_onevent: return "pulsestyle_onevent";
			case Tok_rcmos: return "rcmos";
			case Tok_real: return "real";
			case Tok_realtime: return "realtime";
			case Tok_reg: return "reg";
			case Tok_reject_on: return "reject_on";
			case Tok_release: return "release";
			case Tok_repeat: return "repeat";
			case Tok_restrict: return "restrict";
			case Tok_rnmos: return "rnmos";
			case Tok_rpmos: return "rpmos";
			case Tok_rtran: return "rtran";
			case Tok_rtranif0: return "rtranif0";
			case Tok_rtranif1: return "rtranif1";
			case Tok_s_always: return "s_always";
			case Tok_s_eventually: return "s_eventually";
			case Tok_s_nexttime: return "s_nexttime";
			case Tok_s_until: return "s_until";
			case Tok_s_until_with: return "s_until_with";
			case Tok_scalared: return "scalared";
			case Tok_sequence: return "sequence";
			case Tok_showcancelled: return "showcancelled";
			case Tok_signed: return "signed";
			case Tok_small: return "small";
			case Tok_specify: return "specify";
			case Tok_specparam: return "specparam";
			case Tok_strong: return "strong";
			case Tok_strong0: return "strong0";
			case Tok_strong1: return "strong1";
			case Tok_supply0: return "supply0";
			case Tok_supply1: return "supply1";
			case Tok_sync_accept_on: return "sync_accept_on";
			case Tok_sync_reject_on: return "sync_reject_on";
			case Tok_table: return "table";
			case Tok_task: return "task";
			case Tok_throughout: return "throughout";
			case Tok_time: return "time";
			case Tok_tran: return "tran";
			case Tok_tranif0: return "tranif0";
			case Tok_tranif1: return "tranif1";
			case Tok_tri: return "tri";
			case Tok_tri0: return "tri0";
			case Tok_tri1: return "tri1";
			case Tok_triand: return "triand";
			case Tok_trior: return "trior";
			case Tok_trireg: return "trireg";
			case Tok_until: return "until";
			case Tok_until_with: return "until_with";
			case Tok_use: return "use";
			case Tok_uwire: return "uwire";
			case Tok_vectored: return "vectored";
			case Tok_wait: return "wait";
			case Tok_wand: return "wand";
			case Tok_weak: return "weak";
			case Tok_weak0: return "weak0";
			case Tok_weak1: return "weak1";
			case Tok_while: return "while";
			case Tok_wire: return "wire";
			case Tok_within: return "within";
			case Tok_wor: return "wor";
			case Tok_xnor: return "xnor";
			case Tok_xor: return "xor";
			case Tok_Attribute: return "Attribute";
			case Tok_Comment: return "Comment";
			case Tok_MacroUsage: return "MacroUsage";
			case Tok_Section: return "Section";
			case Tok_SectionEnd: return "SectionEnd";
			case Tok_CoDi: return "CoDi";
			case Tok_LineCont: return "LineCont";
			case Tok_Realnum: return "Realnum";
			case Tok_Natural: return "Natural";
			case Tok_SizedBased: return "SizedBased";
			case Tok_BasedInt: return "BasedInt";
			case Tok_BaseFormat: return "BaseFormat";
			case Tok_BaseValue: return "BaseValue";
			case Tok_SysName: return "SysName";
			case Tok_Ident: return "Ident";
			case Tok_Str: return "Str";
			case Tok_Eof: return "<eof>";
			default: return "";
		}
	}
	const char* tokenTypeName( int r ) {
		switch(r) {
			case Tok_Invalid: return "Tok_Invalid";
			case Tok_Bang: return "Tok_Bang";
			case Tok_BangEq: return "Tok_BangEq";
			case Tok_Bang2Eq: return "Tok_Bang2Eq";
			case Tok_Hash: return "Tok_Hash";
			case Tok_2Hash: return "Tok_2Hash";
			case Tok_2HashLbrackStarRbrack: return "Tok_2HashLbrackStarRbrack";
			case Tok_2HashLbrackPlusRbrack: return "Tok_2HashLbrackPlusRbrack";
			case Tok_HashMinusHash: return "Tok_HashMinusHash";
			case Tok_HashEqHash: return "Tok_HashEqHash";
			case Tok_Dlr: return "Tok_Dlr";
			case Tok_Percent: return "Tok_Percent";
			case Tok_Amp: return "Tok_Amp";
			case Tok_2Amp: return "Tok_2Amp";
			case Tok_3Amp: return "Tok_3Amp";
			case Tok_Lpar: return "Tok_Lpar";
			case Tok_Latt: return "Tok_Latt";
			case Tok_LparStarRpar: return "Tok_LparStarRpar";
			case Tok_Rpar: return "Tok_Rpar";
			case Tok_Star: return "Tok_Star";
			case Tok_Ratt: return "Tok_Ratt";
			case Tok_2Star: return "Tok_2Star";
			case Tok_Rcmt: return "Tok_Rcmt";
			case Tok_StarGt: return "Tok_StarGt";
			case Tok_Plus: return "Tok_Plus";
			case Tok_PlusColon: return "Tok_PlusColon";
			case Tok_Comma: return "Tok_Comma";
			case Tok_Minus: return "Tok_Minus";
			case Tok_MinusColon: return "Tok_MinusColon";
			case Tok_MinusGt: return "Tok_MinusGt";
			case Tok_Dot: return "Tok_Dot";
			case Tok_2Dot: return "Tok_2Dot";
			case Tok_3Dot: return "Tok_3Dot";
			case Tok_Slash: return "Tok_Slash";
			case Tok_Lcmt: return "Tok_Lcmt";
			case Tok_2Slash: return "Tok_2Slash";
			case Tok_Colon: return "Tok_Colon";
			case Tok_ColonSlash: return "Tok_ColonSlash";
			case Tok_ColonEq: return "Tok_ColonEq";
			case Tok_Semi: return "Tok_Semi";
			case Tok_Lt: return "Tok_Lt";
			case Tok_2Lt: return "Tok_2Lt";
			case Tok_3Lt: return "Tok_3Lt";
			case Tok_Leq: return "Tok_Leq";
			case Tok_Eq: return "Tok_Eq";
			case Tok_2Eq: return "Tok_2Eq";
			case Tok_3Eq: return "Tok_3Eq";
			case Tok_EqGt: return "Tok_EqGt";
			case Tok_Gt: return "Tok_Gt";
			case Tok_Geq: return "Tok_Geq";
			case Tok_2Gt: return "Tok_2Gt";
			case Tok_3Gt: return "Tok_3Gt";
			case Tok_Qmark: return "Tok_Qmark";
			case Tok_At: return "Tok_At";
			case Tok_Lbrack: return "Tok_Lbrack";
			case Tok_LbrackStar: return "Tok_LbrackStar";
			case Tok_LbrackStarRbrack: return "Tok_LbrackStarRbrack";
			case Tok_LbrackPlusRbrack: return "Tok_LbrackPlusRbrack";
			case Tok_LbrackMinusGt: return "Tok_LbrackMinusGt";
			case Tok_LbrackEq: return "Tok_LbrackEq";
			case Tok_Rbrack: return "Tok_Rbrack";
			case Tok_Hat: return "Tok_Hat";
			case Tok_HatTilde: return "Tok_HatTilde";
			case Tok_Lbrace: return "Tok_Lbrace";
			case Tok_Bar: return "Tok_Bar";
			case Tok_BarMinusGt: return "Tok_BarMinusGt";
			case Tok_BarEqGt: return "Tok_BarEqGt";
			case Tok_2Bar: return "Tok_2Bar";
			case Tok_Rbrace: return "Tok_Rbrace";
			case Tok_Tilde: return "Tok_Tilde";
			case Tok_TildeAmp: return "Tok_TildeAmp";
			case Tok_TildeHat: return "Tok_TildeHat";
			case Tok_TildeBar: return "Tok_TildeBar";
			case Tok_dlr_fullskew: return "Tok_dlr_fullskew";
			case Tok_dlr_hold: return "Tok_dlr_hold";
			case Tok_dlr_nochange: return "Tok_dlr_nochange";
			case Tok_dlr_period: return "Tok_dlr_period";
			case Tok_dlr_recovery: return "Tok_dlr_recovery";
			case Tok_dlr_recrem: return "Tok_dlr_recrem";
			case Tok_dlr_removal: return "Tok_dlr_removal";
			case Tok_dlr_setup: return "Tok_dlr_setup";
			case Tok_dlr_setuphold: return "Tok_dlr_setuphold";
			case Tok_dlr_skew: return "Tok_dlr_skew";
			case Tok_dlr_timeskew: return "Tok_dlr_timeskew";
			case Tok_dlr_width: return "Tok_dlr_width";
			case Tok_PATHPULSE_dlr: return "Tok_PATHPULSE_dlr";
			case Tok_accept_on: return "Tok_accept_on";
			case Tok_always: return "Tok_always";
			case Tok_and: return "Tok_and";
			case Tok_assert: return "Tok_assert";
			case Tok_assign: return "Tok_assign";
			case Tok_assume: return "Tok_assume";
			case Tok_automatic: return "Tok_automatic";
			case Tok_begin: return "Tok_begin";
			case Tok_buf: return "Tok_buf";
			case Tok_bufif0: return "Tok_bufif0";
			case Tok_bufif1: return "Tok_bufif1";
			case Tok_case: return "Tok_case";
			case Tok_casex: return "Tok_casex";
			case Tok_casez: return "Tok_casez";
			case Tok_cell: return "Tok_cell";
			case Tok_cmos: return "Tok_cmos";
			case Tok_config: return "Tok_config";
			case Tok_cover: return "Tok_cover";
			case Tok_deassign: return "Tok_deassign";
			case Tok_default: return "Tok_default";
			case Tok_defparam: return "Tok_defparam";
			case Tok_design: return "Tok_design";
			case Tok_disable: return "Tok_disable";
			case Tok_dist: return "Tok_dist";
			case Tok_edge: return "Tok_edge";
			case Tok_else: return "Tok_else";
			case Tok_end: return "Tok_end";
			case Tok_endcase: return "Tok_endcase";
			case Tok_endconfig: return "Tok_endconfig";
			case Tok_endfunction: return "Tok_endfunction";
			case Tok_endgenerate: return "Tok_endgenerate";
			case Tok_endmodule: return "Tok_endmodule";
			case Tok_endprimitive: return "Tok_endprimitive";
			case Tok_endspecify: return "Tok_endspecify";
			case Tok_endtable: return "Tok_endtable";
			case Tok_endtask: return "Tok_endtask";
			case Tok_event: return "Tok_event";
			case Tok_eventually: return "Tok_eventually";
			case Tok_final: return "Tok_final";
			case Tok_for: return "Tok_for";
			case Tok_force: return "Tok_force";
			case Tok_forever: return "Tok_forever";
			case Tok_fork: return "Tok_fork";
			case Tok_function: return "Tok_function";
			case Tok_generate: return "Tok_generate";
			case Tok_genvar: return "Tok_genvar";
			case Tok_highz0: return "Tok_highz0";
			case Tok_highz1: return "Tok_highz1";
			case Tok_if: return "Tok_if";
			case Tok_iff: return "Tok_iff";
			case Tok_ifnone: return "Tok_ifnone";
			case Tok_implies: return "Tok_implies";
			case Tok_incdir: return "Tok_incdir";
			case Tok_include: return "Tok_include";
			case Tok_initial: return "Tok_initial";
			case Tok_inout: return "Tok_inout";
			case Tok_input: return "Tok_input";
			case Tok_instance: return "Tok_instance";
			case Tok_integer: return "Tok_integer";
			case Tok_intersect: return "Tok_intersect";
			case Tok_join: return "Tok_join";
			case Tok_large: return "Tok_large";
			case Tok_liblist: return "Tok_liblist";
			case Tok_library: return "Tok_library";
			case Tok_localparam: return "Tok_localparam";
			case Tok_logic: return "Tok_logic";
			case Tok_macromodule: return "Tok_macromodule";
			case Tok_medium: return "Tok_medium";
			case Tok_module: return "Tok_module";
			case Tok_nand: return "Tok_nand";
			case Tok_negedge: return "Tok_negedge";
			case Tok_nexttime: return "Tok_nexttime";
			case Tok_nmos: return "Tok_nmos";
			case Tok_nor: return "Tok_nor";
			case Tok_noshowcancelled: return "Tok_noshowcancelled";
			case Tok_not: return "Tok_not";
			case Tok_notif0: return "Tok_notif0";
			case Tok_notif1: return "Tok_notif1";
			case Tok_or: return "Tok_or";
			case Tok_output: return "Tok_output";
			case Tok_parameter: return "Tok_parameter";
			case Tok_pmos: return "Tok_pmos";
			case Tok_posedge: return "Tok_posedge";
			case Tok_primitive: return "Tok_primitive";
			case Tok_property: return "Tok_property";
			case Tok_pull0: return "Tok_pull0";
			case Tok_pull1: return "Tok_pull1";
			case Tok_pulldown: return "Tok_pulldown";
			case Tok_pullup: return "Tok_pullup";
			case Tok_pulsestyle_ondetect: return "Tok_pulsestyle_ondetect";
			case Tok_pulsestyle_onevent: return "Tok_pulsestyle_onevent";
			case Tok_rcmos: return "Tok_rcmos";
			case Tok_real: return "Tok_real";
			case Tok_realtime: return "Tok_realtime";
			case Tok_reg: return "Tok_reg";
			case Tok_reject_on: return "Tok_reject_on";
			case Tok_release: return "Tok_release";
			case Tok_repeat: return "Tok_repeat";
			case Tok_restrict: return "Tok_restrict";
			case Tok_rnmos: return "Tok_rnmos";
			case Tok_rpmos: return "Tok_rpmos";
			case Tok_rtran: return "Tok_rtran";
			case Tok_rtranif0: return "Tok_rtranif0";
			case Tok_rtranif1: return "Tok_rtranif1";
			case Tok_s_always: return "Tok_s_always";
			case Tok_s_eventually: return "Tok_s_eventually";
			case Tok_s_nexttime: return "Tok_s_nexttime";
			case Tok_s_until: return "Tok_s_until";
			case Tok_s_until_with: return "Tok_s_until_with";
			case Tok_scalared: return "Tok_scalared";
			case Tok_sequence: return "Tok_sequence";
			case Tok_showcancelled: return "Tok_showcancelled";
			case Tok_signed: return "Tok_signed";
			case Tok_small: return "Tok_small";
			case Tok_specify: return "Tok_specify";
			case Tok_specparam: return "Tok_specparam";
			case Tok_strong: return "Tok_strong";
			case Tok_strong0: return "Tok_strong0";
			case Tok_strong1: return "Tok_strong1";
			case Tok_supply0: return "Tok_supply0";
			case Tok_supply1: return "Tok_supply1";
			case Tok_sync_accept_on: return "Tok_sync_accept_on";
			case Tok_sync_reject_on: return "Tok_sync_reject_on";
			case Tok_table: return "Tok_table";
			case Tok_task: return "Tok_task";
			case Tok_throughout: return "Tok_throughout";
			case Tok_time: return "Tok_time";
			case Tok_tran: return "Tok_tran";
			case Tok_tranif0: return "Tok_tranif0";
			case Tok_tranif1: return "Tok_tranif1";
			case Tok_tri: return "Tok_tri";
			case Tok_tri0: return "Tok_tri0";
			case Tok_tri1: return "Tok_tri1";
			case Tok_triand: return "Tok_triand";
			case Tok_trior: return "Tok_trior";
			case Tok_trireg: return "Tok_trireg";
			case Tok_until: return "Tok_until";
			case Tok_until_with: return "Tok_until_with";
			case Tok_use: return "Tok_use";
			case Tok_uwire: return "Tok_uwire";
			case Tok_vectored: return "Tok_vectored";
			case Tok_wait: return "Tok_wait";
			case Tok_wand: return "Tok_wand";
			case Tok_weak: return "Tok_weak";
			case Tok_weak0: return "Tok_weak0";
			case Tok_weak1: return "Tok_weak1";
			case Tok_while: return "Tok_while";
			case Tok_wire: return "Tok_wire";
			case Tok_within: return "Tok_within";
			case Tok_wor: return "Tok_wor";
			case Tok_xnor: return "Tok_xnor";
			case Tok_xor: return "Tok_xor";
			case Tok_Attribute: return "Tok_Attribute";
			case Tok_Comment: return "Tok_Comment";
			case Tok_MacroUsage: return "Tok_MacroUsage";
			case Tok_Section: return "Tok_Section";
			case Tok_SectionEnd: return "Tok_SectionEnd";
			case Tok_CoDi: return "Tok_CoDi";
			case Tok_LineCont: return "Tok_LineCont";
			case Tok_Realnum: return "Tok_Realnum";
			case Tok_Natural: return "Tok_Natural";
			case Tok_SizedBased: return "Tok_SizedBased";
			case Tok_BasedInt: return "Tok_BasedInt";
			case Tok_BaseFormat: return "Tok_BaseFormat";
			case Tok_BaseValue: return "Tok_BaseValue";
			case Tok_SysName: return "Tok_SysName";
			case Tok_Ident: return "Tok_Ident";
			case Tok_Str: return "Tok_Str";
			case Tok_Eof: return "Tok_Eof";
			default: return "";
		}
	}
	bool tokenTypeIsLiteral( int r ) {
		return r > TT_Literals && r < TT_Keywords;
	}
	bool tokenTypeIsKeyword( int r ) {
		return r > TT_Keywords && r < TT_Specials;
	}
	bool tokenTypeIsSpecial( int r ) {
		return r > TT_Specials && r < TT_Max;
	}
	static inline char at( const QByteArray& str, int i ){
		return ( i >= 0 && i < str.size() ? str[i] : 0 );
	}
	TokenType tokenTypeFromString( const QByteArray& str, int* pos ) {
		int i = ( pos != 0 ? *pos: 0 );
		TokenType res = Tok_Invalid;
		switch( at(str,i) ){
		case '!':
			if( at(str,i+1) == '=' ){
				if( at(str,i+2) == '=' ){
					res = Tok_Bang2Eq; i += 3;
				} else {
					res = Tok_BangEq; i += 2;
				}
			} else {
				res = Tok_Bang; i += 1;
			}
			break;
		case '#':
			switch( at(str,i+1) ){
			case '#':
				if( at(str,i+2) == '[' ){
					switch( at(str,i+3) ){
					case '*':
						if( at(str,i+4) == ']' ){
							res = Tok_2HashLbrackStarRbrack; i += 5;
						}
						break;
					case '+':
						if( at(str,i+4) == ']' ){
							res = Tok_2HashLbrackPlusRbrack; i += 5;
						}
						break;
					}
				} else {
					res = Tok_2Hash; i += 2;
				}
				break;
			case '-':
				if( at(str,i+2) == '#' ){
					res = Tok_HashMinusHash; i += 3;
				}
				break;
			case '=':
				if( at(str,i+2) == '#' ){
					res = Tok_HashEqHash; i += 3;
				}
				break;
			default:
				res = Tok_Hash; i += 1;
				break;
			}
			break;
		case '$':
			switch( at(str,i+1) ){
			case 'f':
				if( at(str,i+2) == 'u' ){
					if( at(str,i+3) == 'l' ){
						if( at(str,i+4) == 'l' ){
							if( at(str,i+5) == 's' ){
								if( at(str,i+6) == 'k' ){
									if( at(str,i+7) == 'e' ){
										if( at(str,i+8) == 'w' ){
											res = Tok_dlr_fullskew; i += 9;
										}
									}
								}
							}
						}
					}
				}
				break;
			case 'h':
				if( at(str,i+2) == 'o' ){
					if( at(str,i+3) == 'l' ){
						if( at(str,i+4) == 'd' ){
							res = Tok_dlr_hold; i += 5;
						}
					}
				}
				break;
			case 'n':
				if( at(str,i+2) == 'o' ){
					if( at(str,i+3) == 'c' ){
						if( at(str,i+4) == 'h' ){
							if( at(str,i+5) == 'a' ){
								if( at(str,i+6) == 'n' ){
									if( at(str,i+7) == 'g' ){
										if( at(str,i+8) == 'e' ){
											res = Tok_dlr_nochange; i += 9;
										}
									}
								}
							}
						}
					}
				}
				break;
			case 'p':
				if( at(str,i+2) == 'e' ){
					if( at(str,i+3) == 'r' ){
						if( at(str,i+4) == 'i' ){
							if( at(str,i+5) == 'o' ){
								if( at(str,i+6) == 'd' ){
									res = Tok_dlr_period; i += 7;
								}
							}
						}
					}
				}
				break;
			case 'r':
				if( at(str,i+2) == 'e' ){
					switch( at(str,i+3) ){
					case 'c':
						switch( at(str,i+4) ){
						case 'o':
							if( at(str,i+5) == 'v' ){
								if( at(str,i+6) == 'e' ){
									if( at(str,i+7) == 'r' ){
										if( at(str,i+8) == 'y' ){
											res = Tok_dlr_recovery; i += 9;
										}
									}
								}
							}
							break;
						case 'r':
							if( at(str,i+5) == 'e' ){
								if( at(str,i+6) == 'm' ){
									res = Tok_dlr_recrem; i += 7;
								}
							}
							break;
						}
						break;
					case 'm':
						if( at(str,i+4) == 'o' ){
							if( at(str,i+5) == 'v' ){
								if( at(str,i+6) == 'a' ){
									if( at(str,i+7) == 'l' ){
										res = Tok_dlr_removal; i += 8;
									}
								}
							}
						}
						break;
					}
				}
				break;
			case 's':
				switch( at(str,i+2) ){
				case 'e':
					if( at(str,i+3) == 't' ){
						if( at(str,i+4) == 'u' ){
							if( at(str,i+5) == 'p' ){
								if( at(str,i+6) == 'h' ){
									if( at(str,i+7) == 'o' ){
										if( at(str,i+8) == 'l' ){
											if( at(str,i+9) == 'd' ){
												res = Tok_dlr_setuphold; i += 10;
											}
										}
									}
								} else {
									res = Tok_dlr_setup; i += 6;
								}
							}
						}
					}
					break;
				case 'k':
					if( at(str,i+3) == 'e' ){
						if( at(str,i+4) == 'w' ){
							res = Tok_dlr_skew; i += 5;
						}
					}
					break;
				}
				break;
			case 't':
				if( at(str,i+2) == 'i' ){
					if( at(str,i+3) == 'm' ){
						if( at(str,i+4) == 'e' ){
							if( at(str,i+5) == 's' ){
								if( at(str,i+6) == 'k' ){
									if( at(str,i+7) == 'e' ){
										if( at(str,i+8) == 'w' ){
											res = Tok_dlr_timeskew; i += 9;
										}
									}
								}
							}
						}
					}
				}
				break;
			case 'w':
				if( at(str,i+2) == 'i' ){
					if( at(str,i+3) == 'd' ){
						if( at(str,i+4) == 't' ){
							if( at(str,i+5) == 'h' ){
								res = Tok_dlr_width; i += 6;
							}
						}
					}
				}
				break;
			default:
				res = Tok_Dlr; i += 1;
				break;
			}
			break;
		case '%':
			res = Tok_Percent; i += 1;
			break;
		case '&':
			if( at(str,i+1) == '&' ){
				if( at(str,i+2) == '&' ){
					res = Tok_3Amp; i += 3;
				} else {
					res = Tok_2Amp; i += 2;
				}
			} else {
				res = Tok_Amp; i += 1;
			}
			break;
		case '(':
			if( at(str,i+1) == '*' ){
				if( at(str,i+2) == ')' ){
					res = Tok_LparStarRpar; i += 3;
				} else {
					res = Tok_Latt; i += 2;
				}
			} else {
				res = Tok_Lpar; i += 1;
			}
			break;
		case ')':
			res = Tok_Rpar; i += 1;
			break;
		case '*':
			switch( at(str,i+1) ){
			case ')':
				res = Tok_Ratt; i += 2;
				break;
			case '*':
				res = Tok_2Star; i += 2;
				break;
			case '/':
				res = Tok_Rcmt; i += 2;
				break;
			case '>':
				res = Tok_StarGt; i += 2;
				break;
			default:
				res = Tok_Star; i += 1;
				break;
			}
			break;
		case '+':
			if( at(str,i+1) == ':' ){
				res = Tok_PlusColon; i += 2;
			} else {
				res = Tok_Plus; i += 1;
			}
			break;
		case ',':
			res = Tok_Comma; i += 1;
			break;
		case '-':
			switch( at(str,i+1) ){
			case ':':
				res = Tok_MinusColon; i += 2;
				break;
			case '>':
				res = Tok_MinusGt; i += 2;
				break;
			default:
				res = Tok_Minus; i += 1;
				break;
			}
			break;
		case '.':
			if( at(str,i+1) == '.' ){
				if( at(str,i+2) == '.' ){
					res = Tok_3Dot; i += 3;
				} else {
					res = Tok_2Dot; i += 2;
				}
			} else {
				res = Tok_Dot; i += 1;
			}
			break;
		case '/':
			switch( at(str,i+1) ){
			case '*':
				res = Tok_Lcmt; i += 2;
				break;
			case '/':
				res = Tok_2Slash; i += 2;
				break;
			default:
				res = Tok_Slash; i += 1;
				break;
			}
			break;
		case ':':
			switch( at(str,i+1) ){
			case '/':
				res = Tok_ColonSlash; i += 2;
				break;
			case '=':
				res = Tok_ColonEq; i += 2;
				break;
			default:
				res = Tok_Colon; i += 1;
				break;
			}
			break;
		case ';':
			res = Tok_Semi; i += 1;
			break;
		case '<':
			switch( at(str,i+1) ){
			case '<':
				if( at(str,i+2) == '<' ){
					res = Tok_3Lt; i += 3;
				} else {
					res = Tok_2Lt; i += 2;
				}
				break;
			case '=':
				res = Tok_Leq; i += 2;
				break;
			default:
				res = Tok_Lt; i += 1;
				break;
			}
			break;
		case '=':
			switch( at(str,i+1) ){
			case '=':
				if( at(str,i+2) == '=' ){
					res = Tok_3Eq; i += 3;
				} else {
					res = Tok_2Eq; i += 2;
				}
				break;
			case '>':
				res = Tok_EqGt; i += 2;
				break;
			default:
				res = Tok_Eq; i += 1;
				break;
			}
			break;
		case '>':
			switch( at(str,i+1) ){
			case '=':
				res = Tok_Geq; i += 2;
				break;
			case '>':
				if( at(str,i+2) == '>' ){
					res = Tok_3Gt; i += 3;
				} else {
					res = Tok_2Gt; i += 2;
				}
				break;
			default:
				res = Tok_Gt; i += 1;
				break;
			}
			break;
		case '?':
			res = Tok_Qmark; i += 1;
			break;
		case '@':
			res = Tok_At; i += 1;
			break;
		case 'P':
			if( at(str,i+1) == 'A' ){
				if( at(str,i+2) == 'T' ){
					if( at(str,i+3) == 'H' ){
						if( at(str,i+4) == 'P' ){
							if( at(str,i+5) == 'U' ){
								if( at(str,i+6) == 'L' ){
									if( at(str,i+7) == 'S' ){
										if( at(str,i+8) == 'E' ){
											if( at(str,i+9) == '$' ){
												res = Tok_PATHPULSE_dlr; i += 10;
											}
										}
									}
								}
							}
						}
					}
				}
			}
			break;
		case '[':
			switch( at(str,i+1) ){
			case '*':
				if( at(str,i+2) == ']' ){
					res = Tok_LbrackStarRbrack; i += 3;
				} else {
					res = Tok_LbrackStar; i += 2;
				}
				break;
			case '+':
				if( at(str,i+2) == ']' ){
					res = Tok_LbrackPlusRbrack; i += 3;
				}
				break;
			case '-':
				if( at(str,i+2) == '>' ){
					res = Tok_LbrackMinusGt; i += 3;
				}
				break;
			case '=':
				res = Tok_LbrackEq; i += 2;
				break;
			default:
				res = Tok_Lbrack; i += 1;
				break;
			}
			break;
		case ']':
			res = Tok_Rbrack; i += 1;
			break;
		case '^':
			if( at(str,i+1) == '~' ){
				res = Tok_HatTilde; i += 2;
			} else {
				res = Tok_Hat; i += 1;
			}
			break;
		case 'a':
			switch( at(str,i+1) ){
			case 'c':
				if( at(str,i+2) == 'c' ){
					if( at(str,i+3) == 'e' ){
						if( at(str,i+4) == 'p' ){
							if( at(str,i+5) == 't' ){
								if( at(str,i+6) == '_' ){
									if( at(str,i+7) == 'o' ){
										if( at(str,i+8) == 'n' ){
											res = Tok_accept_on; i += 9;
										}
									}
								}
							}
						}
					}
				}
				break;
			case 'l':
				if( at(str,i+2) == 'w' ){
					if( at(str,i+3) == 'a' ){
						if( at(str,i+4) == 'y' ){
							if( at(str,i+5) == 's' ){
								res = Tok_always; i += 6;
							}
						}
					}
				}
				break;
			case 'n':
				if( at(str,i+2) == 'd' ){
					res = Tok_and; i += 3;
				}
				break;
			case 's':
				if( at(str,i+2) == 's' ){
					switch( at(str,i+3) ){
					case 'e':
						if( at(str,i+4) == 'r' ){
							if( at(str,i+5) == 't' ){
								res = Tok_assert; i += 6;
							}
						}
						break;
					case 'i':
						if( at(str,i+4) == 'g' ){
							if( at(str,i+5) == 'n' ){
								res = Tok_assign; i += 6;
							}
						}
						break;
					case 'u':
						if( at(str,i+4) == 'm' ){
							if( at(str,i+5) == 'e' ){
								res = Tok_assume; i += 6;
							}
						}
						break;
					}
				}
				break;
			case 'u':
				if( at(str,i+2) == 't' ){
					if( at(str,i+3) == 'o' ){
						if( at(str,i+4) == 'm' ){
							if( at(str,i+5) == 'a' ){
								if( at(str,i+6) == 't' ){
									if( at(str,i+7) == 'i' ){
										if( at(str,i+8) == 'c' ){
											res = Tok_automatic; i += 9;
										}
									}
								}
							}
						}
					}
				}
				break;
			}
			break;
		case 'b':
			switch( at(str,i+1) ){
			case 'e':
				if( at(str,i+2) == 'g' ){
					if( at(str,i+3) == 'i' ){
						if( at(str,i+4) == 'n' ){
							res = Tok_begin; i += 5;
						}
					}
				}
				break;
			case 'u':
				if( at(str,i+2) == 'f' ){
					if( at(str,i+3) == 'i' ){
						if( at(str,i+4) == 'f' ){
							switch( at(str,i+5) ){
							case '0':
								res = Tok_bufif0; i += 6;
								break;
							case '1':
								res = Tok_bufif1; i += 6;
								break;
							}
						}
					} else {
						res = Tok_buf; i += 3;
					}
				}
				break;
			}
			break;
		case 'c':
			switch( at(str,i+1) ){
			case 'a':
				if( at(str,i+2) == 's' ){
					if( at(str,i+3) == 'e' ){
						switch( at(str,i+4) ){
						case 'x':
							res = Tok_casex; i += 5;
							break;
						case 'z':
							res = Tok_casez; i += 5;
							break;
						default:
							res = Tok_case; i += 4;
							break;
						}
					}
				}
				break;
			case 'e':
				if( at(str,i+2) == 'l' ){
					if( at(str,i+3) == 'l' ){
						res = Tok_cell; i += 4;
					}
				}
				break;
			case 'm':
				if( at(str,i+2) == 'o' ){
					if( at(str,i+3) == 's' ){
						res = Tok_cmos; i += 4;
					}
				}
				break;
			case 'o':
				switch( at(str,i+2) ){
				case 'n':
					if( at(str,i+3) == 'f' ){
						if( at(str,i+4) == 'i' ){
							if( at(str,i+5) == 'g' ){
								res = Tok_config; i += 6;
							}
						}
					}
					break;
				case 'v':
					if( at(str,i+3) == 'e' ){
						if( at(str,i+4) == 'r' ){
							res = Tok_cover; i += 5;
						}
					}
					break;
				}
				break;
			}
			break;
		case 'd':
			switch( at(str,i+1) ){
			case 'e':
				switch( at(str,i+2) ){
				case 'a':
					if( at(str,i+3) == 's' ){
						if( at(str,i+4) == 's' ){
							if( at(str,i+5) == 'i' ){
								if( at(str,i+6) == 'g' ){
									if( at(str,i+7) == 'n' ){
										res = Tok_deassign; i += 8;
									}
								}
							}
						}
					}
					break;
				case 'f':
					switch( at(str,i+3) ){
					case 'a':
						if( at(str,i+4) == 'u' ){
							if( at(str,i+5) == 'l' ){
								if( at(str,i+6) == 't' ){
									res = Tok_default; i += 7;
								}
							}
						}
						break;
					case 'p':
						if( at(str,i+4) == 'a' ){
							if( at(str,i+5) == 'r' ){
								if( at(str,i+6) == 'a' ){
									if( at(str,i+7) == 'm' ){
										res = Tok_defparam; i += 8;
									}
								}
							}
						}
						break;
					}
					break;
				case 's':
					if( at(str,i+3) == 'i' ){
						if( at(str,i+4) == 'g' ){
							if( at(str,i+5) == 'n' ){
								res = Tok_design; i += 6;
							}
						}
					}
					break;
				}
				break;
			case 'i':
				if( at(str,i+2) == 's' ){
					switch( at(str,i+3) ){
					case 'a':
						if( at(str,i+4) == 'b' ){
							if( at(str,i+5) == 'l' ){
								if( at(str,i+6) == 'e' ){
									res = Tok_disable; i += 7;
								}
							}
						}
						break;
					case 't':
						res = Tok_dist; i += 4;
						break;
					}
				}
				break;
			}
			break;
		case 'e':
			switch( at(str,i+1) ){
			case 'd':
				if( at(str,i+2) == 'g' ){
					if( at(str,i+3) == 'e' ){
						res = Tok_edge; i += 4;
					}
				}
				break;
			case 'l':
				if( at(str,i+2) == 's' ){
					if( at(str,i+3) == 'e' ){
						res = Tok_else; i += 4;
					}
				}
				break;
			case 'n':
				if( at(str,i+2) == 'd' ){
					switch( at(str,i+3) ){
					case 'c':
						switch( at(str,i+4) ){
						case 'a':
							if( at(str,i+5) == 's' ){
								if( at(str,i+6) == 'e' ){
									res = Tok_endcase; i += 7;
								}
							}
							break;
						case 'o':
							if( at(str,i+5) == 'n' ){
								if( at(str,i+6) == 'f' ){
									if( at(str,i+7) == 'i' ){
										if( at(str,i+8) == 'g' ){
											res = Tok_endconfig; i += 9;
										}
									}
								}
							}
							break;
						}
						break;
					case 'f':
						if( at(str,i+4) == 'u' ){
							if( at(str,i+5) == 'n' ){
								if( at(str,i+6) == 'c' ){
									if( at(str,i+7) == 't' ){
										if( at(str,i+8) == 'i' ){
											if( at(str,i+9) == 'o' ){
												if( at(str,i+10) == 'n' ){
													res = Tok_endfunction; i += 11;
												}
											}
										}
									}
								}
							}
						}
						break;
					case 'g':
						if( at(str,i+4) == 'e' ){
							if( at(str,i+5) == 'n' ){
								if( at(str,i+6) == 'e' ){
									if( at(str,i+7) == 'r' ){
										if( at(str,i+8) == 'a' ){
											if( at(str,i+9) == 't' ){
												if( at(str,i+10) == 'e' ){
													res = Tok_endgenerate; i += 11;
												}
											}
										}
									}
								}
							}
						}
						break;
					case 'm':
						if( at(str,i+4) == 'o' ){
							if( at(str,i+5) == 'd' ){
								if( at(str,i+6) == 'u' ){
									if( at(str,i+7) == 'l' ){
										if( at(str,i+8) == 'e' ){
											res = Tok_endmodule; i += 9;
										}
									}
								}
							}
						}
						break;
					case 'p':
						if( at(str,i+4) == 'r' ){
							if( at(str,i+5) == 'i' ){
								if( at(str,i+6) == 'm' ){
									if( at(str,i+7) == 'i' ){
										if( at(str,i+8) == 't' ){
											if( at(str,i+9) == 'i' ){
												if( at(str,i+10) == 'v' ){
													if( at(str,i+11) == 'e' ){
														res = Tok_endprimitive; i += 12;
													}
												}
											}
										}
									}
								}
							}
						}
						break;
					case 's':
						if( at(str,i+4) == 'p' ){
							if( at(str,i+5) == 'e' ){
								if( at(str,i+6) == 'c' ){
									if( at(str,i+7) == 'i' ){
										if( at(str,i+8) == 'f' ){
											if( at(str,i+9) == 'y' ){
												res = Tok_endspecify; i += 10;
											}
										}
									}
								}
							}
						}
						break;
					case 't':
						if( at(str,i+4) == 'a' ){
							switch( at(str,i+5) ){
							case 'b':
								if( at(str,i+6) == 'l' ){
									if( at(str,i+7) == 'e' ){
										res = Tok_endtable; i += 8;
									}
								}
								break;
							case 's':
								if( at(str,i+6) == 'k' ){
									res = Tok_endtask; i += 7;
								}
								break;
							}
						}
						break;
					default:
						res = Tok_end; i += 3;
						break;
					}
				}
				break;
			case 'v':
				if( at(str,i+2) == 'e' ){
					if( at(str,i+3) == 'n' ){
						if( at(str,i+4) == 't' ){
							if( at(str,i+5) == 'u' ){
								if( at(str,i+6) == 'a' ){
									if( at(str,i+7) == 'l' ){
										if( at(str,i+8) == 'l' ){
											if( at(str,i+9) == 'y' ){
												res = Tok_eventually; i += 10;
											}
										}
									}
								}
							} else {
								res = Tok_event; i += 5;
							}
						}
					}
				}
				break;
			}
			break;
		case 'f':
			switch( at(str,i+1) ){
			case 'i':
				if( at(str,i+2) == 'n' ){
					if( at(str,i+3) == 'a' ){
						if( at(str,i+4) == 'l' ){
							res = Tok_final; i += 5;
						}
					}
				}
				break;
			case 'o':
				if( at(str,i+2) == 'r' ){
					switch( at(str,i+3) ){
					case 'c':
						if( at(str,i+4) == 'e' ){
							res = Tok_force; i += 5;
						}
						break;
					case 'e':
						if( at(str,i+4) == 'v' ){
							if( at(str,i+5) == 'e' ){
								if( at(str,i+6) == 'r' ){
									res = Tok_forever; i += 7;
								}
							}
						}
						break;
					case 'k':
						res = Tok_fork; i += 4;
						break;
					default:
						res = Tok_for; i += 3;
						break;
					}
				}
				break;
			case 'u':
				if( at(str,i+2) == 'n' ){
					if( at(str,i+3) == 'c' ){
						if( at(str,i+4) == 't' ){
							if( at(str,i+5) == 'i' ){
								if( at(str,i+6) == 'o' ){
									if( at(str,i+7) == 'n' ){
										res = Tok_function; i += 8;
									}
								}
							}
						}
					}
				}
				break;
			}
			break;
		case 'g':
			if( at(str,i+1) == 'e' ){
				if( at(str,i+2) == 'n' ){
					switch( at(str,i+3) ){
					case 'e':
						if( at(str,i+4) == 'r' ){
							if( at(str,i+5) == 'a' ){
								if( at(str,i+6) == 't' ){
									if( at(str,i+7) == 'e' ){
										res = Tok_generate; i += 8;
									}
								}
							}
						}
						break;
					case 'v':
						if( at(str,i+4) == 'a' ){
							if( at(str,i+5) == 'r' ){
								res = Tok_genvar; i += 6;
							}
						}
						break;
					}
				}
			}
			break;
		case 'h':
			if( at(str,i+1) == 'i' ){
				if( at(str,i+2) == 'g' ){
					if( at(str,i+3) == 'h' ){
						if( at(str,i+4) == 'z' ){
							switch( at(str,i+5) ){
							case '0':
								res = Tok_highz0; i += 6;
								break;
							case '1':
								res = Tok_highz1; i += 6;
								break;
							}
						}
					}
				}
			}
			break;
		case 'i':
			switch( at(str,i+1) ){
			case 'f':
				switch( at(str,i+2) ){
				case 'f':
					res = Tok_iff; i += 3;
					break;
				case 'n':
					if( at(str,i+3) == 'o' ){
						if( at(str,i+4) == 'n' ){
							if( at(str,i+5) == 'e' ){
								res = Tok_ifnone; i += 6;
							}
						}
					}
					break;
				default:
					res = Tok_if; i += 2;
					break;
				}
				break;
			case 'm':
				if( at(str,i+2) == 'p' ){
					if( at(str,i+3) == 'l' ){
						if( at(str,i+4) == 'i' ){
							if( at(str,i+5) == 'e' ){
								if( at(str,i+6) == 's' ){
									res = Tok_implies; i += 7;
								}
							}
						}
					}
				}
				break;
			case 'n':
				switch( at(str,i+2) ){
				case 'c':
					switch( at(str,i+3) ){
					case 'd':
						if( at(str,i+4) == 'i' ){
							if( at(str,i+5) == 'r' ){
								res = Tok_incdir; i += 6;
							}
						}
						break;
					case 'l':
						if( at(str,i+4) == 'u' ){
							if( at(str,i+5) == 'd' ){
								if( at(str,i+6) == 'e' ){
									res = Tok_include; i += 7;
								}
							}
						}
						break;
					}
					break;
				case 'i':
					if( at(str,i+3) == 't' ){
						if( at(str,i+4) == 'i' ){
							if( at(str,i+5) == 'a' ){
								if( at(str,i+6) == 'l' ){
									res = Tok_initial; i += 7;
								}
							}
						}
					}
					break;
				case 'o':
					if( at(str,i+3) == 'u' ){
						if( at(str,i+4) == 't' ){
							res = Tok_inout; i += 5;
						}
					}
					break;
				case 'p':
					if( at(str,i+3) == 'u' ){
						if( at(str,i+4) == 't' ){
							res = Tok_input; i += 5;
						}
					}
					break;
				case 's':
					if( at(str,i+3) == 't' ){
						if( at(str,i+4) == 'a' ){
							if( at(str,i+5) == 'n' ){
								if( at(str,i+6) == 'c' ){
									if( at(str,i+7) == 'e' ){
										res = Tok_instance; i += 8;
									}
								}
							}
						}
					}
					break;
				case 't':
					if( at(str,i+3) == 'e' ){
						switch( at(str,i+4) ){
						case 'g':
							if( at(str,i+5) == 'e' ){
								if( at(str,i+6) == 'r' ){
									res = Tok_integer; i += 7;
								}
							}
							break;
						case 'r':
							if( at(str,i+5) == 's' ){
								if( at(str,i+6) == 'e' ){
									if( at(str,i+7) == 'c' ){
										if( at(str,i+8) == 't' ){
											res = Tok_intersect; i += 9;
										}
									}
								}
							}
							break;
						}
					}
					break;
				}
				break;
			}
			break;
		case 'j':
			if( at(str,i+1) == 'o' ){
				if( at(str,i+2) == 'i' ){
					if( at(str,i+3) == 'n' ){
						res = Tok_join; i += 4;
					}
				}
			}
			break;
		case 'l':
			switch( at(str,i+1) ){
			case 'a':
				if( at(str,i+2) == 'r' ){
					if( at(str,i+3) == 'g' ){
						if( at(str,i+4) == 'e' ){
							res = Tok_large; i += 5;
						}
					}
				}
				break;
			case 'i':
				if( at(str,i+2) == 'b' ){
					switch( at(str,i+3) ){
					case 'l':
						if( at(str,i+4) == 'i' ){
							if( at(str,i+5) == 's' ){
								if( at(str,i+6) == 't' ){
									res = Tok_liblist; i += 7;
								}
							}
						}
						break;
					case 'r':
						if( at(str,i+4) == 'a' ){
							if( at(str,i+5) == 'r' ){
								if( at(str,i+6) == 'y' ){
									res = Tok_library; i += 7;
								}
							}
						}
						break;
					}
				}
				break;
			case 'o':
				switch( at(str,i+2) ){
				case 'c':
					if( at(str,i+3) == 'a' ){
						if( at(str,i+4) == 'l' ){
							if( at(str,i+5) == 'p' ){
								if( at(str,i+6) == 'a' ){
									if( at(str,i+7) == 'r' ){
										if( at(str,i+8) == 'a' ){
											if( at(str,i+9) == 'm' ){
												res = Tok_localparam; i += 10;
											}
										}
									}
								}
							}
						}
					}
					break;
				case 'g':
					if( at(str,i+3) == 'i' ){
						if( at(str,i+4) == 'c' ){
							res = Tok_logic; i += 5;
						}
					}
					break;
				}
				break;
			}
			break;
		case 'm':
			switch( at(str,i+1) ){
			case 'a':
				if( at(str,i+2) == 'c' ){
					if( at(str,i+3) == 'r' ){
						if( at(str,i+4) == 'o' ){
							if( at(str,i+5) == 'm' ){
								if( at(str,i+6) == 'o' ){
									if( at(str,i+7) == 'd' ){
										if( at(str,i+8) == 'u' ){
											if( at(str,i+9) == 'l' ){
												if( at(str,i+10) == 'e' ){
													res = Tok_macromodule; i += 11;
												}
											}
										}
									}
								}
							}
						}
					}
				}
				break;
			case 'e':
				if( at(str,i+2) == 'd' ){
					if( at(str,i+3) == 'i' ){
						if( at(str,i+4) == 'u' ){
							if( at(str,i+5) == 'm' ){
								res = Tok_medium; i += 6;
							}
						}
					}
				}
				break;
			case 'o':
				if( at(str,i+2) == 'd' ){
					if( at(str,i+3) == 'u' ){
						if( at(str,i+4) == 'l' ){
							if( at(str,i+5) == 'e' ){
								res = Tok_module; i += 6;
							}
						}
					}
				}
				break;
			}
			break;
		case 'n':
			switch( at(str,i+1) ){
			case 'a':
				if( at(str,i+2) == 'n' ){
					if( at(str,i+3) == 'd' ){
						res = Tok_nand; i += 4;
					}
				}
				break;
			case 'e':
				switch( at(str,i+2) ){
				case 'g':
					if( at(str,i+3) == 'e' ){
						if( at(str,i+4) == 'd' ){
							if( at(str,i+5) == 'g' ){
								if( at(str,i+6) == 'e' ){
									res = Tok_negedge; i += 7;
								}
							}
						}
					}
					break;
				case 'x':
					if( at(str,i+3) == 't' ){
						if( at(str,i+4) == 't' ){
							if( at(str,i+5) == 'i' ){
								if( at(str,i+6) == 'm' ){
									if( at(str,i+7) == 'e' ){
										res = Tok_nexttime; i += 8;
									}
								}
							}
						}
					}
					break;
				}
				break;
			case 'm':
				if( at(str,i+2) == 'o' ){
					if( at(str,i+3) == 's' ){
						res = Tok_nmos; i += 4;
					}
				}
				break;
			case 'o':
				switch( at(str,i+2) ){
				case 'r':
					res = Tok_nor; i += 3;
					break;
				case 's':
					if( at(str,i+3) == 'h' ){
						if( at(str,i+4) == 'o' ){
							if( at(str,i+5) == 'w' ){
								if( at(str,i+6) == 'c' ){
									if( at(str,i+7) == 'a' ){
										if( at(str,i+8) == 'n' ){
											if( at(str,i+9) == 'c' ){
												if( at(str,i+10) == 'e' ){
													if( at(str,i+11) == 'l' ){
														if( at(str,i+12) == 'l' ){
															if( at(str,i+13) == 'e' ){
																if( at(str,i+14) == 'd' ){
																	res = Tok_noshowcancelled; i += 15;
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					break;
				case 't':
					if( at(str,i+3) == 'i' ){
						if( at(str,i+4) == 'f' ){
							switch( at(str,i+5) ){
							case '0':
								res = Tok_notif0; i += 6;
								break;
							case '1':
								res = Tok_notif1; i += 6;
								break;
							}
						}
					} else {
						res = Tok_not; i += 3;
					}
					break;
				}
				break;
			}
			break;
		case 'o':
			switch( at(str,i+1) ){
			case 'r':
				res = Tok_or; i += 2;
				break;
			case 'u':
				if( at(str,i+2) == 't' ){
					if( at(str,i+3) == 'p' ){
						if( at(str,i+4) == 'u' ){
							if( at(str,i+5) == 't' ){
								res = Tok_output; i += 6;
							}
						}
					}
				}
				break;
			}
			break;
		case 'p':
			switch( at(str,i+1) ){
			case 'a':
				if( at(str,i+2) == 'r' ){
					if( at(str,i+3) == 'a' ){
						if( at(str,i+4) == 'm' ){
							if( at(str,i+5) == 'e' ){
								if( at(str,i+6) == 't' ){
									if( at(str,i+7) == 'e' ){
										if( at(str,i+8) == 'r' ){
											res = Tok_parameter; i += 9;
										}
									}
								}
							}
						}
					}
				}
				break;
			case 'm':
				if( at(str,i+2) == 'o' ){
					if( at(str,i+3) == 's' ){
						res = Tok_pmos; i += 4;
					}
				}
				break;
			case 'o':
				if( at(str,i+2) == 's' ){
					if( at(str,i+3) == 'e' ){
						if( at(str,i+4) == 'd' ){
							if( at(str,i+5) == 'g' ){
								if( at(str,i+6) == 'e' ){
									res = Tok_posedge; i += 7;
								}
							}
						}
					}
				}
				break;
			case 'r':
				switch( at(str,i+2) ){
				case 'i':
					if( at(str,i+3) == 'm' ){
						if( at(str,i+4) == 'i' ){
							if( at(str,i+5) == 't' ){
								if( at(str,i+6) == 'i' ){
									if( at(str,i+7) == 'v' ){
										if( at(str,i+8) == 'e' ){
											res = Tok_primitive; i += 9;
										}
									}
								}
							}
						}
					}
					break;
				case 'o':
					if( at(str,i+3) == 'p' ){
						if( at(str,i+4) == 'e' ){
							if( at(str,i+5) == 'r' ){
								if( at(str,i+6) == 't' ){
									if( at(str,i+7) == 'y' ){
										res = Tok_property; i += 8;
									}
								}
							}
						}
					}
					break;
				}
				break;
			case 'u':
				if( at(str,i+2) == 'l' ){
					switch( at(str,i+3) ){
					case 'l':
						switch( at(str,i+4) ){
						case '0':
							res = Tok_pull0; i += 5;
							break;
						case '1':
							res = Tok_pull1; i += 5;
							break;
						case 'd':
							if( at(str,i+5) == 'o' ){
								if( at(str,i+6) == 'w' ){
									if( at(str,i+7) == 'n' ){
										res = Tok_pulldown; i += 8;
									}
								}
							}
							break;
						case 'u':
							if( at(str,i+5) == 'p' ){
								res = Tok_pullup; i += 6;
							}
							break;
						}
						break;
					case 's':
						if( at(str,i+4) == 'e' ){
							if( at(str,i+5) == 's' ){
								if( at(str,i+6) == 't' ){
									if( at(str,i+7) == 'y' ){
										if( at(str,i+8) == 'l' ){
											if( at(str,i+9) == 'e' ){
												if( at(str,i+10) == '_' ){
													if( at(str,i+11) == 'o' ){
														if( at(str,i+12) == 'n' ){
															switch( at(str,i+13) ){
															case 'd':
																if( at(str,i+14) == 'e' ){
																	if( at(str,i+15) == 't' ){
																		if( at(str,i+16) == 'e' ){
																			if( at(str,i+17) == 'c' ){
																				if( at(str,i+18) == 't' ){
																					res = Tok_pulsestyle_ondetect; i += 19;
																				}
																			}
																		}
																	}
																}
																break;
															case 'e':
																if( at(str,i+14) == 'v' ){
																	if( at(str,i+15) == 'e' ){
																		if( at(str,i+16) == 'n' ){
																			if( at(str,i+17) == 't' ){
																				res = Tok_pulsestyle_onevent; i += 18;
																			}
																		}
																	}
																}
																break;
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
						break;
					}
				}
				break;
			}
			break;
		case 'r':
			switch( at(str,i+1) ){
			case 'c':
				if( at(str,i+2) == 'm' ){
					if( at(str,i+3) == 'o' ){
						if( at(str,i+4) == 's' ){
							res = Tok_rcmos; i += 5;
						}
					}
				}
				break;
			case 'e':
				switch( at(str,i+2) ){
				case 'a':
					if( at(str,i+3) == 'l' ){
						if( at(str,i+4) == 't' ){
							if( at(str,i+5) == 'i' ){
								if( at(str,i+6) == 'm' ){
									if( at(str,i+7) == 'e' ){
										res = Tok_realtime; i += 8;
									}
								}
							}
						} else {
							res = Tok_real; i += 4;
						}
					}
					break;
				case 'g':
					res = Tok_reg; i += 3;
					break;
				case 'j':
					if( at(str,i+3) == 'e' ){
						if( at(str,i+4) == 'c' ){
							if( at(str,i+5) == 't' ){
								if( at(str,i+6) == '_' ){
									if( at(str,i+7) == 'o' ){
										if( at(str,i+8) == 'n' ){
											res = Tok_reject_on; i += 9;
										}
									}
								}
							}
						}
					}
					break;
				case 'l':
					if( at(str,i+3) == 'e' ){
						if( at(str,i+4) == 'a' ){
							if( at(str,i+5) == 's' ){
								if( at(str,i+6) == 'e' ){
									res = Tok_release; i += 7;
								}
							}
						}
					}
					break;
				case 'p':
					if( at(str,i+3) == 'e' ){
						if( at(str,i+4) == 'a' ){
							if( at(str,i+5) == 't' ){
								res = Tok_repeat; i += 6;
							}
						}
					}
					break;
				case 's':
					if( at(str,i+3) == 't' ){
						if( at(str,i+4) == 'r' ){
							if( at(str,i+5) == 'i' ){
								if( at(str,i+6) == 'c' ){
									if( at(str,i+7) == 't' ){
										res = Tok_restrict; i += 8;
									}
								}
							}
						}
					}
					break;
				}
				break;
			case 'n':
				if( at(str,i+2) == 'm' ){
					if( at(str,i+3) == 'o' ){
						if( at(str,i+4) == 's' ){
							res = Tok_rnmos; i += 5;
						}
					}
				}
				break;
			case 'p':
				if( at(str,i+2) == 'm' ){
					if( at(str,i+3) == 'o' ){
						if( at(str,i+4) == 's' ){
							res = Tok_rpmos; i += 5;
						}
					}
				}
				break;
			case 't':
				if( at(str,i+2) == 'r' ){
					if( at(str,i+3) == 'a' ){
						if( at(str,i+4) == 'n' ){
							if( at(str,i+5) == 'i' ){
								if( at(str,i+6) == 'f' ){
									switch( at(str,i+7) ){
									case '0':
										res = Tok_rtranif0; i += 8;
										break;
									case '1':
										res = Tok_rtranif1; i += 8;
										break;
									}
								}
							} else {
								res = Tok_rtran; i += 5;
							}
						}
					}
				}
				break;
			}
			break;
		case 's':
			switch( at(str,i+1) ){
			case '_':
				switch( at(str,i+2) ){
				case 'a':
					if( at(str,i+3) == 'l' ){
						if( at(str,i+4) == 'w' ){
							if( at(str,i+5) == 'a' ){
								if( at(str,i+6) == 'y' ){
									if( at(str,i+7) == 's' ){
										res = Tok_s_always; i += 8;
									}
								}
							}
						}
					}
					break;
				case 'e':
					if( at(str,i+3) == 'v' ){
						if( at(str,i+4) == 'e' ){
							if( at(str,i+5) == 'n' ){
								if( at(str,i+6) == 't' ){
									if( at(str,i+7) == 'u' ){
										if( at(str,i+8) == 'a' ){
											if( at(str,i+9) == 'l' ){
												if( at(str,i+10) == 'l' ){
													if( at(str,i+11) == 'y' ){
														res = Tok_s_eventually; i += 12;
													}
												}
											}
										}
									}
								}
							}
						}
					}
					break;
				case 'n':
					if( at(str,i+3) == 'e' ){
						if( at(str,i+4) == 'x' ){
							if( at(str,i+5) == 't' ){
								if( at(str,i+6) == 't' ){
									if( at(str,i+7) == 'i' ){
										if( at(str,i+8) == 'm' ){
											if( at(str,i+9) == 'e' ){
												res = Tok_s_nexttime; i += 10;
											}
										}
									}
								}
							}
						}
					}
					break;
				case 'u':
					if( at(str,i+3) == 'n' ){
						if( at(str,i+4) == 't' ){
							if( at(str,i+5) == 'i' ){
								if( at(str,i+6) == 'l' ){
									if( at(str,i+7) == '_' ){
										if( at(str,i+8) == 'w' ){
											if( at(str,i+9) == 'i' ){
												if( at(str,i+10) == 't' ){
													if( at(str,i+11) == 'h' ){
														res = Tok_s_until_with; i += 12;
													}
												}
											}
										}
									} else {
										res = Tok_s_until; i += 7;
									}
								}
							}
						}
					}
					break;
				}
				break;
			case 'c':
				if( at(str,i+2) == 'a' ){
					if( at(str,i+3) == 'l' ){
						if( at(str,i+4) == 'a' ){
							if( at(str,i+5) == 'r' ){
								if( at(str,i+6) == 'e' ){
									if( at(str,i+7) == 'd' ){
										res = Tok_scalared; i += 8;
									}
								}
							}
						}
					}
				}
				break;
			case 'e':
				if( at(str,i+2) == 'q' ){
					if( at(str,i+3) == 'u' ){
						if( at(str,i+4) == 'e' ){
							if( at(str,i+5) == 'n' ){
								if( at(str,i+6) == 'c' ){
									if( at(str,i+7) == 'e' ){
										res = Tok_sequence; i += 8;
									}
								}
							}
						}
					}
				}
				break;
			case 'h':
				if( at(str,i+2) == 'o' ){
					if( at(str,i+3) == 'w' ){
						if( at(str,i+4) == 'c' ){
							if( at(str,i+5) == 'a' ){
								if( at(str,i+6) == 'n' ){
									if( at(str,i+7) == 'c' ){
										if( at(str,i+8) == 'e' ){
											if( at(str,i+9) == 'l' ){
												if( at(str,i+10) == 'l' ){
													if( at(str,i+11) == 'e' ){
														if( at(str,i+12) == 'd' ){
															res = Tok_showcancelled; i += 13;
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				break;
			case 'i':
				if( at(str,i+2) == 'g' ){
					if( at(str,i+3) == 'n' ){
						if( at(str,i+4) == 'e' ){
							if( at(str,i+5) == 'd' ){
								res = Tok_signed; i += 6;
							}
						}
					}
				}
				break;
			case 'm':
				if( at(str,i+2) == 'a' ){
					if( at(str,i+3) == 'l' ){
						if( at(str,i+4) == 'l' ){
							res = Tok_small; i += 5;
						}
					}
				}
				break;
			case 'p':
				if( at(str,i+2) == 'e' ){
					if( at(str,i+3) == 'c' ){
						switch( at(str,i+4) ){
						case 'i':
							if( at(str,i+5) == 'f' ){
								if( at(str,i+6) == 'y' ){
									res = Tok_specify; i += 7;
								}
							}
							break;
						case 'p':
							if( at(str,i+5) == 'a' ){
								if( at(str,i+6) == 'r' ){
									if( at(str,i+7) == 'a' ){
										if( at(str,i+8) == 'm' ){
											res = Tok_specparam; i += 9;
										}
									}
								}
							}
							break;
						}
					}
				}
				break;
			case 't':
				if( at(str,i+2) == 'r' ){
					if( at(str,i+3) == 'o' ){
						if( at(str,i+4) == 'n' ){
							if( at(str,i+5) == 'g' ){
								switch( at(str,i+6) ){
								case '0':
									res = Tok_strong0; i += 7;
									break;
								case '1':
									res = Tok_strong1; i += 7;
									break;
								default:
									res = Tok_strong; i += 6;
									break;
								}
							}
						}
					}
				}
				break;
			case 'u':
				if( at(str,i+2) == 'p' ){
					if( at(str,i+3) == 'p' ){
						if( at(str,i+4) == 'l' ){
							if( at(str,i+5) == 'y' ){
								switch( at(str,i+6) ){
								case '0':
									res = Tok_supply0; i += 7;
									break;
								case '1':
									res = Tok_supply1; i += 7;
									break;
								}
							}
						}
					}
				}
				break;
			case 'y':
				if( at(str,i+2) == 'n' ){
					if( at(str,i+3) == 'c' ){
						if( at(str,i+4) == '_' ){
							switch( at(str,i+5) ){
							case 'a':
								if( at(str,i+6) == 'c' ){
									if( at(str,i+7) == 'c' ){
										if( at(str,i+8) == 'e' ){
											if( at(str,i+9) == 'p' ){
												if( at(str,i+10) == 't' ){
													if( at(str,i+11) == '_' ){
														if( at(str,i+12) == 'o' ){
															if( at(str,i+13) == 'n' ){
																res = Tok_sync_accept_on; i += 14;
															}
														}
													}
												}
											}
										}
									}
								}
								break;
							case 'r':
								if( at(str,i+6) == 'e' ){
									if( at(str,i+7) == 'j' ){
										if( at(str,i+8) == 'e' ){
											if( at(str,i+9) == 'c' ){
												if( at(str,i+10) == 't' ){
													if( at(str,i+11) == '_' ){
														if( at(str,i+12) == 'o' ){
															if( at(str,i+13) == 'n' ){
																res = Tok_sync_reject_on; i += 14;
															}
														}
													}
												}
											}
										}
									}
								}
								break;
							}
						}
					}
				}
				break;
			}
			break;
		case 't':
			switch( at(str,i+1) ){
			case 'a':
				switch( at(str,i+2) ){
				case 'b':
					if( at(str,i+3) == 'l' ){
						if( at(str,i+4) == 'e' ){
							res = Tok_table; i += 5;
						}
					}
					break;
				case 's':
					if( at(str,i+3) == 'k' ){
						res = Tok_task; i += 4;
					}
					break;
				}
				break;
			case 'h':
				if( at(str,i+2) == 'r' ){
					if( at(str,i+3) == 'o' ){
						if( at(str,i+4) == 'u' ){
							if( at(str,i+5) == 'g' ){
								if( at(str,i+6) == 'h' ){
									if( at(str,i+7) == 'o' ){
										if( at(str,i+8) == 'u' ){
											if( at(str,i+9) == 't' ){
												res = Tok_throughout; i += 10;
											}
										}
									}
								}
							}
						}
					}
				}
				break;
			case 'i':
				if( at(str,i+2) == 'm' ){
					if( at(str,i+3) == 'e' ){
						res = Tok_time; i += 4;
					}
				}
				break;
			case 'r':
				switch( at(str,i+2) ){
				case 'a':
					if( at(str,i+3) == 'n' ){
						if( at(str,i+4) == 'i' ){
							if( at(str,i+5) == 'f' ){
								switch( at(str,i+6) ){
								case '0':
									res = Tok_tranif0; i += 7;
									break;
								case '1':
									res = Tok_tranif1; i += 7;
									break;
								}
							}
						} else {
							res = Tok_tran; i += 4;
						}
					}
					break;
				case 'i':
					switch( at(str,i+3) ){
					case '0':
						res = Tok_tri0; i += 4;
						break;
					case '1':
						res = Tok_tri1; i += 4;
						break;
					case 'a':
						if( at(str,i+4) == 'n' ){
							if( at(str,i+5) == 'd' ){
								res = Tok_triand; i += 6;
							}
						}
						break;
					case 'o':
						if( at(str,i+4) == 'r' ){
							res = Tok_trior; i += 5;
						}
						break;
					case 'r':
						if( at(str,i+4) == 'e' ){
							if( at(str,i+5) == 'g' ){
								res = Tok_trireg; i += 6;
							}
						}
						break;
					default:
						res = Tok_tri; i += 3;
						break;
					}
					break;
				}
				break;
			}
			break;
		case 'u':
			switch( at(str,i+1) ){
			case 'n':
				if( at(str,i+2) == 't' ){
					if( at(str,i+3) == 'i' ){
						if( at(str,i+4) == 'l' ){
							if( at(str,i+5) == '_' ){
								if( at(str,i+6) == 'w' ){
									if( at(str,i+7) == 'i' ){
										if( at(str,i+8) == 't' ){
											if( at(str,i+9) == 'h' ){
												res = Tok_until_with; i += 10;
											}
										}
									}
								}
							} else {
								res = Tok_until; i += 5;
							}
						}
					}
				}
				break;
			case 's':
				if( at(str,i+2) == 'e' ){
					res = Tok_use; i += 3;
				}
				break;
			case 'w':
				if( at(str,i+2) == 'i' ){
					if( at(str,i+3) == 'r' ){
						if( at(str,i+4) == 'e' ){
							res = Tok_uwire; i += 5;
						}
					}
				}
				break;
			}
			break;
		case 'v':
			if( at(str,i+1) == 'e' ){
				if( at(str,i+2) == 'c' ){
					if( at(str,i+3) == 't' ){
						if( at(str,i+4) == 'o' ){
							if( at(str,i+5) == 'r' ){
								if( at(str,i+6) == 'e' ){
									if( at(str,i+7) == 'd' ){
										res = Tok_vectored; i += 8;
									}
								}
							}
						}
					}
				}
			}
			break;
		case 'w':
			switch( at(str,i+1) ){
			case 'a':
				switch( at(str,i+2) ){
				case 'i':
					if( at(str,i+3) == 't' ){
						res = Tok_wait; i += 4;
					}
					break;
				case 'n':
					if( at(str,i+3) == 'd' ){
						res = Tok_wand; i += 4;
					}
					break;
				}
				break;
			case 'e':
				if( at(str,i+2) == 'a' ){
					if( at(str,i+3) == 'k' ){
						switch( at(str,i+4) ){
						case '0':
							res = Tok_weak0; i += 5;
							break;
						case '1':
							res = Tok_weak1; i += 5;
							break;
						default:
							res = Tok_weak; i += 4;
							break;
						}
					}
				}
				break;
			case 'h':
				if( at(str,i+2) == 'i' ){
					if( at(str,i+3) == 'l' ){
						if( at(str,i+4) == 'e' ){
							res = Tok_while; i += 5;
						}
					}
				}
				break;
			case 'i':
				switch( at(str,i+2) ){
				case 'r':
					if( at(str,i+3) == 'e' ){
						res = Tok_wire; i += 4;
					}
					break;
				case 't':
					if( at(str,i+3) == 'h' ){
						if( at(str,i+4) == 'i' ){
							if( at(str,i+5) == 'n' ){
								res = Tok_within; i += 6;
							}
						}
					}
					break;
				}
				break;
			case 'o':
				if( at(str,i+2) == 'r' ){
					res = Tok_wor; i += 3;
				}
				break;
			}
			break;
		case 'x':
			switch( at(str,i+1) ){
			case 'n':
				if( at(str,i+2) == 'o' ){
					if( at(str,i+3) == 'r' ){
						res = Tok_xnor; i += 4;
					}
				}
				break;
			case 'o':
				if( at(str,i+2) == 'r' ){
					res = Tok_xor; i += 3;
				}
				break;
			}
			break;
		case '{':
			res = Tok_Lbrace; i += 1;
			break;
		case '|':
			switch( at(str,i+1) ){
			case '-':
				if( at(str,i+2) == '>' ){
					res = Tok_BarMinusGt; i += 3;
				}
				break;
			case '=':
				if( at(str,i+2) == '>' ){
					res = Tok_BarEqGt; i += 3;
				}
				break;
			case '|':
				res = Tok_2Bar; i += 2;
				break;
			default:
				res = Tok_Bar; i += 1;
				break;
			}
			break;
		case '}':
			res = Tok_Rbrace; i += 1;
			break;
		case '~':
			switch( at(str,i+1) ){
			case '&':
				res = Tok_TildeAmp; i += 2;
				break;
			case '^':
				res = Tok_TildeHat; i += 2;
				break;
			case '|':
				res = Tok_TildeBar; i += 2;
				break;
			default:
				res = Tok_Tilde; i += 1;
				break;
			}
			break;
		}
		if(pos) *pos = i;
		return res;
	}
}
